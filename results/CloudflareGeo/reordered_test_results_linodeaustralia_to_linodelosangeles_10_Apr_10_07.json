{
  "1": {
    "test_id": 2,
    "description": "Client must send connection preface after TLS establishment",
    "timestamp": "2025-04-10 11:07:38",
    "result": {
      "description": "Client must send connection preface after TLS establishment",
      "result": {
        "Worker_1": {
          "State": "TIMEOUT",
          "Variables": {
            "role": "client",
            "ctrl": null,
            "client_val": "client",
            "waiting_time": "1",
            "event": "TIMEOUT",
            "client": null,
            "msg": "No response received for test request from losangelescloudflare.nopasaran.co:443",
            "result": "TIMEOUT"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "role": "server",
            "client_val": "client",
            "event": "TIMEOUT",
            "server": null,
            "msg": "Timeout occurred after 5.0s while waiting for client connection at 0.0.0.0:443.",
            "result": "TIMEOUT"
          }
        }
      }
    }
  },
  "2": {
    "test_id": 3,
    "description": "the connection preface starts with the string: PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n",
    "timestamp": "2025-04-10 11:07:59",
    "result": {
      "description": "the connection preface starts with the string: PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n",
      "result": {
        "Worker_1": {
          "State": "TIMEOUT",
          "Variables": {
            "role": "client",
            "ctrl": null,
            "client_val": "client",
            "waiting_time": "1",
            "event": "TIMEOUT",
            "client": null,
            "msg": "No response received for test request from losangelescloudflare.nopasaran.co:443",
            "result": "TIMEOUT"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "role": "server",
            "client_val": "client",
            "event": "TIMEOUT",
            "server": null,
            "msg": "Timeout occurred after 5.0s while waiting for client connection at 0.0.0.0:443.",
            "result": "TIMEOUT"
          }
        }
      }
    }
  },
  "3": {
    "test_id": 4,
    "description": "Client preface must include a SETTINGS frame",
    "timestamp": "2025-04-10 11:08:18",
    "result": {
      "description": "Client preface must include a SETTINGS frame",
      "result": {
        "Worker_2": {
          "State": "FINAL",
          "Variables": {
            "server_result": "Successfully received all 1/1 frames.",
            "client_result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0c14179b12f49-MEL'), ('x-forwarded-for', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]"
          }
        },
        "Worker_1": {
          "State": "FINAL",
          "Variables": {
            "client_result": "Successfully received all 1/1 frames.",
            "server_result": "Successfully received all 1/1 frames.",
            "frames_received": "[<ResponseReceived stream_id:3, headers:[(':status', '200'), ('date', 'Thu, 10 Apr 2025 08:08:11 GMT'), ('content-type', 'text/plain'), ('cf-cache-status', 'DYNAMIC'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xip%2FLb7o723MaWQNQ2EywIhtokxoCHYJq7K12%2FblnvZrM%2B%2BXXu6FjnSkeHQwOfyVsGiN41l%2BmYwDb3z%2B94EqGzU%2F60DR1fGtCaqgzhzMXFH2kXvciAvbP%2B405oridBmsHUmA0XX8HpalolxM4jmE0ekdppo%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('server', 'cloudflare'), ('cf-ray', '92e0c14179b12f49-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1536&min_rtt=1259&rtt_var=781&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4063&recv_bytes=848&delivery_rate=2238021&cwnd=248&unsent_bytes=0&cid=9f730a242da65b1f&ts=895&x=0\"')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]"
          }
        }
      }
    }
  },
  "4": {
    "test_id": 8,
    "description": "Values greater than 16,384 MUST NOT be sent unless receiver has set larger SETTINGS_MAX_FRAME_SIZE",
    "timestamp": "2025-04-10 11:09:46",
    "result": {
      "description": "Values greater than 16,384 MUST NOT be sent unless receiver has set larger SETTINGS_MAX_FRAME_SIZE",
      "result": {
        "Worker_2": {
          "State": "FINAL",
          "Variables": {
            "server_result": "Successfully received all 2/2 frames.",
            "client_result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0c35e4f3eb87f-PHX'), ('cf-ipcountry', 'AU'), ('cdn-loop', 'cloudflare; loops=1'), ('user-agent', 'nopasaran-http2-client'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('content-length', '17000'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68'), ('accept', '*/*')]>, <DataReceived stream_id:None, flow_controlled_length:None, data:>]",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]"
          }
        },
        "Worker_1": {
          "State": "FINAL",
          "Variables": {
            "client_result": "Successfully received all 1/1 frames.",
            "server_result": "Successfully received all 2/2 frames.",
            "frames_received": "[<ResponseReceived stream_id:3, headers:[(':status', '200'), ('date', 'Thu, 10 Apr 2025 08:09:38 GMT'), ('content-type', 'text/plain'), ('cf-cache-status', 'DYNAMIC'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IHI%2FUbBaeyXYcgmSuxKSUpOR%2BBla%2FItzbedmTXe%2BjGMOZs1gz5lAQGmz%2F6ZVYekLJ7zDlEz7%2FUGnjutHgmBu%2FE%2BrruWw05rO7R1BvLQb%2BdcOV2epoV2LQIQYRG9Q%2FFsZM6Ulk5wBa%2FslkOTTlSTgaDsFD%2Fo%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('server', 'cloudflare'), ('cf-ray', '92e0c35e4f3eb87f-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=6423&min_rtt=1167&rtt_var=10459&sent=16&recv=22&lost=0&retrans=0&sent_bytes=4128&recv_bytes=17952&delivery_rate=2427493&cwnd=257&unsent_bytes=0&cid=c6624bc05b11b148&ts=747&x=0\"')]>]",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'DATA', 'payload_size': 17000, 'flags': {'END_STREAM': True}}]"
          }
        }
      }
    }
  },
  "5": {
    "test_id": 9,
    "description": "The frame type determines the format and semantics of the frame. Implementations MUST ignore and discard frames of unknown types.",
    "timestamp": "2025-04-10 11:10:50",
    "result": {
      "description": "The frame type determines the format and semantics of the frame. Implementations MUST ignore and discard frames of unknown types.",
      "result": {
        "Worker_1": null,
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "UNKNOWN"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "6": {
    "test_id": 10,
    "description": "A reserved 1-bit field. The semantics of this bit are undefined, and the bit MUST remain unset (0x00) when sending and MUST be ignored when receiving.",
    "timestamp": "2025-04-10 11:11:15",
    "result": {
      "description": "A reserved 1-bit field. The semantics of this bit are undefined, and the bit MUST remain unset (0x00) when sending and MUST be ignored when receiving.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'reserved_bit': True}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "reserved_bit": true
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "7": {
    "test_id": 1,
    "description": "Receiving any frame other than HEADERS or PRIORITY on a stream in this (idle) state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:07:16",
    "result": {
      "description": "Receiving any frame other than HEADERS or PRIORITY on a stream in this (idle) state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'DATA'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "DATA"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "8": {
    "test_id": 7,
    "description": "If an endpoint receives additional frames, other than WINDOW_UPDATE, PRIORITY, or RST_STREAM, for a stream that is in the half-closed (remote) state, it MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED.",
    "timestamp": "2025-04-10 11:09:25",
    "result": {
      "description": "If an endpoint receives additional frames, other than WINDOW_UPDATE, PRIORITY, or RST_STREAM, for a stream that is in the half-closed (remote) state, it MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': True}}, {'type': 'DATA'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": true
                }
              },
              {
                "type": "DATA"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "9": {
    "test_id": 76,
    "description": "An endpoint MUST NOT send frames other than PRIORITY on a closed stream.",
    "timestamp": "2025-04-10 11:45:27",
    "result": {
      "description": "An endpoint MUST NOT send frames other than PRIORITY on a closed stream.",
      "result": {
        "Worker_1": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame with error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'RST_STREAM'}, {'type': 'HEADERS', 'flags': {'END_STREAM': True}}]"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "RST_STREAM"
              },
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": true
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "10": {
    "test_id": 11,
    "description": "Streams initiated by a client MUST use odd-numbered stream identifiers.",
    "timestamp": "2025-04-10 11:11:41",
    "result": {
      "description": "Streams initiated by a client MUST use odd-numbered stream identifiers.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'stream_id': 2}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "stream_id": 2
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "11": {
    "test_id": 13,
    "description": "The identifier of a newly established stream MUST be numerically greater than all streams that the initiating endpoint has opened or reserved.",
    "timestamp": "2025-04-10 11:12:23",
    "result": {
      "description": "The identifier of a newly established stream MUST be numerically greater than all streams that the initiating endpoint has opened or reserved.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'stream_id': 3}, {'type': 'HEADERS', 'stream_id': 1}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "stream_id": 3
              },
              {
                "type": "HEADERS",
                "stream_id": 1
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "12": {
    "test_id": 80,
    "description": "DATA frames MUST be associated with a stream.",
    "timestamp": "2025-04-10 11:49:27",
    "result": {
      "description": "DATA frames MUST be associated with a stream.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'DATA'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "DATA"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "13": {
    "test_id": 81,
    "description": "If a DATA frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:49:47",
    "result": {
      "description": "If a DATA frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'DATA', 'stream_id': 0, 'flags': {'END_STREAM': True}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "DATA",
                "stream_id": 0,
                "flags": {
                  "END_STREAM": true
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "14": {
    "test_id": 82,
    "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the idle state.)",
    "timestamp": "2025-04-10 11:50:46",
    "result": {
      "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the idle state.)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'DATA'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "15": {
    "test_id": 83,
    "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the half-closed (remote) state.)",
    "timestamp": "2025-04-10 11:51:06",
    "result": {
      "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the half-closed (remote) state.)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': True}}, {'type': 'DATA'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": true
                }
              },
              {
                "type": "DATA"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "16": {
    "test_id": 84,
    "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the closed state.)",
    "timestamp": "2025-04-10 11:51:26",
    "result": {
      "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the closed state.)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 3 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'RST_STREAM'}, {'type': 'DATA', 'flags': {'END_STREAM': True}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "RST_STREAM"
              },
              {
                "type": "DATA",
                "flags": {
                  "END_STREAM": true
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "17": {
    "test_id": 85,
    "description": "A HEADERS frame without the END_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream.",
    "timestamp": "2025-04-10 11:52:14",
    "result": {
      "description": "A HEADERS frame without the END_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame with error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_HEADERS': False}}, {'type': 'DATA'}]"
          }
        }
      }
    }
  },
  "18": {
    "test_id": 86,
    "description": "If a HEADERS frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:52:34",
    "result": {
      "description": "If a HEADERS frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'stream_id': 0}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "stream_id": 0
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "19": {
    "test_id": 15,
    "description": "If a PRIORITY frame is received with a stream identifier of 0x00, the recipient MUST respond with a connection error of type PROTOCOL_ERROR",
    "timestamp": "2025-04-10 11:13:03",
    "result": {
      "description": "If a PRIORITY frame is received with a stream identifier of 0x00, the recipient MUST respond with a connection error of type PROTOCOL_ERROR",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'PRIORITY', 'stream_id': 0}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "PRIORITY",
                "stream_id": 0
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "20": {
    "test_id": 17,
    "description": "If a RST_STREAM frame is received with a stream identifier of 0x00, the recipient MUST treat this as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:13:45",
    "result": {
      "description": "If a RST_STREAM frame is received with a stream identifier of 0x00, the recipient MUST treat this as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'RST_STREAM', 'stream_id': 0}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "RST_STREAM",
                "stream_id": 0
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "21": {
    "test_id": 19,
    "description": "A RST_STREAM frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.",
    "timestamp": "2025-04-10 11:14:27",
    "result": {
      "description": "A RST_STREAM frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'RST_STREAM', 'payload_length': 5}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "RST_STREAM",
                "payload_length": 5
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "22": {
    "test_id": 77,
    "description": "RST_STREAM frames MUST NOT be sent for a stream in the 'idle' state.",
    "timestamp": "2025-04-10 11:46:27",
    "result": {
      "description": "RST_STREAM frames MUST NOT be sent for a stream in the 'idle' state.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'RST_STREAM'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "RST_STREAM"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "23": {
    "test_id": 78,
    "description": "RST_STREAM frames MUST be associated with a stream.",
    "timestamp": "2025-04-10 11:47:26",
    "result": {
      "description": "RST_STREAM frames MUST be associated with a stream.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'RST_STREAM'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "24": {
    "test_id": 18,
    "description": "When set, the ACK flag indicates that this frame acknowledges receipt and application of the peer's SETTINGS frame. When this bit is set, the frame payload of the SETTINGS frame MUST be empty.",
    "timestamp": "2025-04-10 11:14:06",
    "result": {
      "description": "When set, the ACK flag indicates that this frame acknowledges receipt and application of the peer's SETTINGS frame. When this bit is set, the frame payload of the SETTINGS frame MUST be empty.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'SETTINGS', 'flags': {'ACK': True}, 'settings': {'MAX_CONCURRENT_STREAMS': 100}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "SETTINGS",
                "flags": {
                  "ACK": true
                },
                "settings": {
                  "MAX_CONCURRENT_STREAMS": 100
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "25": {
    "test_id": 20,
    "description": "The stream identifier for a SETTINGS frame MUST be zero (0x00).",
    "timestamp": "2025-04-10 11:14:47",
    "result": {
      "description": "The stream identifier for a SETTINGS frame MUST be zero (0x00).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'SETTINGS', 'stream_id': 1, 'settings': {'MAX_CONCURRENT_STREAMS': 100}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "SETTINGS",
                "stream_id": 1,
                "settings": {
                  "MAX_CONCURRENT_STREAMS": 100
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "26": {
    "test_id": 21,
    "description": "A SETTINGS frame with a length other than a multiple of 6 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.",
    "timestamp": "2025-04-10 11:15:06",
    "result": {
      "description": "A SETTINGS frame with a length other than a multiple of 6 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'SETTINGS', 'extra_bytes': 5, 'settings': {'MAX_CONCURRENT_STREAMS': 100}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "SETTINGS",
                "extra_bytes": 5,
                "settings": {
                  "MAX_CONCURRENT_STREAMS": 100
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "27": {
    "test_id": 22,
    "description": "The initial value of SETTINGS_ENABLE_PUSH is 1. Any value other than 0 or 1 MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:15:26",
    "result": {
      "description": "The initial value of SETTINGS_ENABLE_PUSH is 1. Any value other than 0 or 1 MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'SETTINGS', 'settings': {'ENABLE_PUSH': 2}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "SETTINGS",
                "settings": {
                  "ENABLE_PUSH": 2
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "28": {
    "test_id": 25,
    "description": "For SETTINGS_INITIAL_WINDOW_SIZE, values above the maximum flow-control window size of 2^31-1 (2147483647) MUST be treated as a connection error (Section 5.4.1) of type FLOW_CONTROL_ERROR.",
    "timestamp": "2025-04-10 11:16:45",
    "result": {
      "description": "For SETTINGS_INITIAL_WINDOW_SIZE, values above the maximum flow-control window size of 2^31-1 (2147483647) MUST be treated as a connection error (Section 5.4.1) of type FLOW_CONTROL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'SETTINGS', 'settings': {'INITIAL_WINDOW_SIZE': 2147483648}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "SETTINGS",
                "settings": {
                  "INITIAL_WINDOW_SIZE": 2147483648
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "29": {
    "test_id": 26,
    "description": "The value advertised by an endpoint MUST be between initial value (2^14 = 16,384) and maximum allowed frame size (2^24-1 = 16,777,215 octets), inclusive.",
    "timestamp": "2025-04-10 11:17:11",
    "result": {
      "description": "The value advertised by an endpoint MUST be between initial value (2^14 = 16,384) and maximum allowed frame size (2^24-1 = 16,777,215 octets), inclusive.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'SETTINGS', 'settings': {'MAX_FRAME_SIZE': 16777216}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "SETTINGS",
                "settings": {
                  "MAX_FRAME_SIZE": 16777216
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "30": {
    "test_id": 27,
    "description": "An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting.",
    "timestamp": "2025-04-10 11:17:36",
    "result": {
      "description": "An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'SETTINGS', 'settings': {'12345': 16777216}, 'raw_payload': True}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "SETTINGS",
                "settings": {
                  "12345": 16777216
                },
                "raw_payload": true
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "31": {
    "test_id": 88,
    "description": "Unsupported settings MUST be ignored.",
    "timestamp": "2025-04-10 11:53:52",
    "result": {
      "description": "Unsupported settings MUST be ignored.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'SETTINGS', 'settings': {'12345': 16777216}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "32": {
    "test_id": 30,
    "description": "If a PING frame is received with a Stream Identifier field value other than 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:20:01",
    "result": {
      "description": "If a PING frame is received with a Stream Identifier field value other than 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'PING', 'stream_id': 3}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "PING",
                "stream_id": 3
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "33": {
    "test_id": 33,
    "description": "A receiver MUST treat the receipt of a WINDOW_UPDATE frame with a flow-control window increment of 0 as a stream error (Section 5.4.2) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:21:06",
    "result": {
      "description": "A receiver MUST treat the receipt of a WINDOW_UPDATE frame with a flow-control window increment of 0 as a stream error (Section 5.4.2) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'WINDOW_UPDATE', 'increment': 0}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "WINDOW_UPDATE",
                "increment": 0
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "34": {
    "test_id": 34,
    "description": "A sender MUST NOT allow a flow-control window to exceed 2^31-1 octets. If a sender receives a WINDOW_UPDATE that causes a flow-control window to exceed this maximum, it MUST terminate either the stream or the connection, as appropriate.",
    "timestamp": "2025-04-10 11:21:46",
    "result": {
      "description": "A sender MUST NOT allow a flow-control window to exceed 2^31-1 octets. If a sender receives a WINDOW_UPDATE that causes a flow-control window to exceed this maximum, it MUST terminate either the stream or the connection, as appropriate.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'WINDOW_UPDATE', 'increment': 2147483647}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "WINDOW_UPDATE",
                "increment": 2147483647
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "35": {
    "test_id": 93,
    "description": "The sender MUST NOT send a flow-controlled frame with a length that exceeds the space available in either of the flow-control windows advertised by the receiver.",
    "timestamp": "2025-04-10 11:56:26",
    "result": {
      "description": "The sender MUST NOT send a flow-controlled frame with a length that exceeds the space available in either of the flow-control windows advertised by the receiver.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": null
      }
    }
  },
  "36": {
    "test_id": 36,
    "description": "If a CONTINUATION frame is received with a Stream Identifier field of 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:22:50",
    "result": {
      "description": "If a CONTINUATION frame is received with a Stream Identifier field of 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame with error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_HEADERS': False}}, {'type': 'CONTINUATION', 'stream_id': 0}]"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_HEADERS": false
                }
              },
              {
                "type": "CONTINUATION",
                "stream_id": 0
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "37": {
    "test_id": 37,
    "description": "A CONTINUATION frame MUST be preceded by a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set. (Using HEADERS frame with END_HEADERS flag set)",
    "timestamp": "2025-04-10 11:23:50",
    "result": {
      "description": "A CONTINUATION frame MUST be preceded by a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set. (Using HEADERS frame with END_HEADERS flag set)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_HEADERS': True}}, {'type': 'CONTINUATION'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "38": {
    "test_id": 94,
    "description": "CONTINUATION frames MUST be associated with a stream.",
    "timestamp": "2025-04-10 11:57:26",
    "result": {
      "description": "CONTINUATION frames MUST be associated with a stream.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'CONTINUATION'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "39": {
    "test_id": 95,
    "description": "If the END_HEADERS flag is not set, this frame MUST be followed by another CONTINUATION frame. A receiver MUST treat the receipt of any other type of frame or a frame on a different stream as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:58:20",
    "result": {
      "description": "If the END_HEADERS flag is not set, this frame MUST be followed by another CONTINUATION frame. A receiver MUST treat the receipt of any other type of frame or a frame on a different stream as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame with error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_HEADERS': False}}, {'type': 'DATA'}]"
          }
        }
      }
    }
  },
  "40": {
    "test_id": 40,
    "description": "Trailers MUST NOT include pseudo-header fields (Section 8.3).",
    "timestamp": "2025-04-10 11:25:10",
    "result": {
      "description": "Trailers MUST NOT include pseudo-header fields (Section 8.3).",
      "result": {
        "Worker_1": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame with error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'DATA'}, {'type': 'TRAILERS', 'headers': {':path': '/'}}]"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "DATA"
              },
              {
                "type": "TRAILERS",
                "headers": {
                  ":path": "/"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "41": {
    "test_id": 96,
    "description": "Other frames (from any stream) MUST NOT occur between the HEADERS frame and any CONTINUATION frames that might follow.",
    "timestamp": "2025-04-10 11:58:54",
    "result": {
      "description": "Other frames (from any stream) MUST NOT occur between the HEADERS frame and any CONTINUATION frames that might follow.",
      "result": {
        "Worker_1": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame after sending 3 of 3 frames. Error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_HEADERS': False}}, {'type': 'DATA'}, {'type': 'CONTINUATION'}]"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_HEADERS": false
                }
              },
              {
                "type": "DATA"
              },
              {
                "type": "CONTINUATION"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "42": {
    "test_id": 97,
    "description": "An endpoint that receives a HEADERS frame without the END_STREAM flag set after receiving the HEADERS frame that opens a request or after receiving a final (non-informational) status code MUST treat the corresponding request or response as malformed (Section 8.1.1).",
    "timestamp": "2025-04-10 11:59:55",
    "result": {
      "description": "An endpoint that receives a HEADERS frame without the END_STREAM flag set after receiving the HEADERS frame that opens a request or after receiving a final (non-informational) status code MUST treat the corresponding request or response as malformed (Section 8.1.1).",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'HEADERS', 'flags': {'END_STREAM': True}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "43": {
    "test_id": 41,
    "description": "Field names MUST be converted to lowercase when constructing an HTTP/2 message.",
    "timestamp": "2025-04-10 11:25:36",
    "result": {
      "description": "Field names MUST be converted to lowercase when constructing an HTTP/2 message.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':METHOD': 'GET', ':SCHEME': 'http', ':PATH': '/', ':AUTHORITY': 'example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":METHOD": "GET",
                  ":SCHEME": "http",
                  ":PATH": "/",
                  ":AUTHORITY": "example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "44": {
    "test_id": 42,
    "description": "Field names MUST NOT contain control characters (0x00-0x1F)",
    "timestamp": "2025-04-10 11:25:55",
    "result": {
      "description": "Field names MUST NOT contain control characters (0x00-0x1F)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x\\x08y': 'backspace', 'x\\ty': 'horizontal-tab', 'x\\ny': 'line-feed', 'x\\x0by': 'vertical-tab', 'x\\x0cy': 'form-feed', 'x\\ry': 'carriage-return', 'x\\x1by': 'escape'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "raw_frame": true,
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "x\by": "backspace",
                  "x\ty": "horizontal-tab",
                  "x\ny": "line-feed",
                  "x\u000by": "vertical-tab",
                  "x\fy": "form-feed",
                  "x\ry": "carriage-return",
                  "x\u001by": "escape"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "45": {
    "test_id": 43,
    "description": "Field names MUST NOT contain ASCII SP (0x20)",
    "timestamp": "2025-04-10 11:26:15",
    "result": {
      "description": "Field names MUST NOT contain ASCII SP (0x20)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'user agent': 'nopasaran'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "user agent": "nopasaran"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "46": {
    "test_id": 44,
    "description": "Field names MUST NOT contain DEL character (0x7F)",
    "timestamp": "2025-04-10 11:26:41",
    "result": {
      "description": "Field names MUST NOT contain DEL character (0x7F)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'user\\x7fagent': 'del-char'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "user\u007fagent": "del-char"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "47": {
    "test_id": 45,
    "description": "Field names MUST NOT contain high byte characters (0x80-0xFF)",
    "timestamp": "2025-04-10 11:27:40",
    "result": {
      "description": "Field names MUST NOT contain high byte characters (0x80-0xFF)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x\u00a8y': 'diaeresis', 'x\u00b0y': 'degree-sign', 'x\u00b8y': 'cedilla', 'x\u00c0y': 'latin-a-grave', 'x\u00c8y': 'latin-e-grave', 'x\u00d0y': 'latin-eth', 'x\u00d8y': 'latin-o-stroke', 'x\u00e0y': 'latin-a-grave-small', 'x\u00e8y': 'latin-e-grave-small', 'x\u00f0y': 'latin-eth-small', 'x\u00f8y': 'latin-o-stroke-small', 'x\u00fay': 'latin-u-acute-small', 'x\u00fcy': 'latin-u-diaeresis-small', 'x\u00fey': 'latin-thorn-small', 'x\u00ffy': 'latin-y-diaeresis-small'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "48": {
    "test_id": 46,
    "description": "With the exception of pseudo-header fields (Section 8.3), which have a name that starts with a single colon, field names MUST NOT include a colon (ASCII COLON, 0x3a).",
    "timestamp": "2025-04-10 11:28:00",
    "result": {
      "description": "With the exception of pseudo-header fields (Section 8.3), which have a name that starts with a single colon, field names MUST NOT include a colon (ASCII COLON, 0x3a).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x:y': 'invalid-colon'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "x:y": "invalid-colon"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "49": {
    "test_id": 47,
    "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the start of the value)",
    "timestamp": "2025-04-10 11:28:41",
    "result": {
      "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the start of the value)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x-lf-start': '\\nvalue'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "raw_frame": true,
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "x-lf-start": "\nvalue"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "50": {
    "test_id": 48,
    "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the start of the value)",
    "timestamp": "2025-04-10 11:29:26",
    "result": {
      "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the start of the value)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x-cr-start': '\\rvalue'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "raw_frame": true,
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "x-cr-start": "\rvalue"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "51": {
    "test_id": 49,
    "description": "A field value MUST NOT start with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09).",
    "timestamp": "2025-04-10 11:29:46",
    "result": {
      "description": "A field value MUST NOT start with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x-leading-space': ' value'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "x-leading-space": " value"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "52": {
    "test_id": 50,
    "description": "A field value MUST NOT end with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09).",
    "timestamp": "2025-04-10 11:30:25",
    "result": {
      "description": "A field value MUST NOT end with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x-trailing-space': 'value '}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "x-trailing-space": "value "
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "53": {
    "test_id": 98,
    "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the middle of the value)",
    "timestamp": "2025-04-10 12:00:56",
    "result": {
      "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the middle of the value)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x-lf-middle': 'val\\nue'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "54": {
    "test_id": 99,
    "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the end of the value)",
    "timestamp": "2025-04-10 12:01:35",
    "result": {
      "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the end of the value)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x-lf-end': 'value\\n'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "raw_frame": true,
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "x-lf-end": "value\n"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "55": {
    "test_id": 100,
    "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the middle of the value)",
    "timestamp": "2025-04-10 12:02:40",
    "result": {
      "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the middle of the value)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x-cr-middle': 'val\\rue'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "56": {
    "test_id": 101,
    "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the end of the value)",
    "timestamp": "2025-04-10 12:03:41",
    "result": {
      "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the end of the value)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'x-cr-end': 'value\\r'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "57": {
    "test_id": 51,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing connection header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 11:31:25",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing connection header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'connection': 'keep-alive'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "58": {
    "test_id": 52,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing proxy-connection header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 11:31:45",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing proxy-connection header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'proxy-connection': 'keep-alive'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "proxy-connection": "keep-alive"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "59": {
    "test_id": 53,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing keep-alive header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 11:32:11",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing keep-alive header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'keep-alive': 'timeout=5'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "keep-alive": "timeout=5"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "60": {
    "test_id": 54,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing transfer-encoding header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 11:33:09",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing transfer-encoding header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'transfer-encoding': 'chunked'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "transfer-encoding": "chunked"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "61": {
    "test_id": 55,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing upgrade header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 11:33:49",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing upgrade header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'upgrade': 'h2c'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "upgrade": "h2c"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "62": {
    "test_id": 56,
    "description": "The TE header field MAY be present in an HTTP/2 request; when it is, it MUST NOT contain any value other than 'trailers'.",
    "timestamp": "2025-04-10 11:34:14",
    "result": {
      "description": "The TE header field MAY be present in an HTTP/2 request; when it is, it MUST NOT contain any value other than 'trailers'.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'te': 'gzip'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "te": "gzip"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "63": {
    "test_id": 57,
    "description": "Pseudo-header fields are not HTTP header fields. Endpoints MUST NOT generate pseudo-header fields other than those defined in this document.",
    "timestamp": "2025-04-10 11:34:54",
    "result": {
      "description": "Pseudo-header fields are not HTTP header fields. Endpoints MUST NOT generate pseudo-header fields other than those defined in this document.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', ':version': '2.0'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  ":version": "2.0"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "64": {
    "test_id": 59,
    "description": "Pseudo-header fields defined for responses MUST NOT appear in requests.",
    "timestamp": "2025-04-10 11:36:07",
    "result": {
      "description": "Pseudo-header fields defined for responses MUST NOT appear in requests.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', ':status': '200'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "65": {
    "test_id": 60,
    "description": "All pseudo-header fields sent from a client MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1).",
    "timestamp": "2025-04-10 11:37:06",
    "result": {
      "description": "All pseudo-header fields sent from a client MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {'accept': '*/*', ':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  "accept": "*/*",
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "66": {
    "test_id": 62,
    "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a request frame with the same value.",
    "timestamp": "2025-04-10 11:37:51",
    "result": {
      "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a request frame with the same value.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com'}, 'duplicate_headers': {':authority': 'example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com"
                },
                "duplicate_headers": {
                  ":authority": "example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "67": {
    "test_id": 63,
    "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a request frame with different values.",
    "timestamp": "2025-04-10 11:38:11",
    "result": {
      "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a request frame with different values.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com'}, 'duplicate_headers': {':authority': 'nopasaran.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com"
                },
                "duplicate_headers": {
                  ":authority": "nopasaran.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "68": {
    "test_id": 66,
    "description": "Clients MUST NOT generate a request with a Host header field that differs from the \":authority\" pseudo-header field.",
    "timestamp": "2025-04-10 11:39:56",
    "result": {
      "description": "Clients MUST NOT generate a request with a Host header field that differs from the \":authority\" pseudo-header field.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'example.com', 'host': 'nopasaran.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com",
                  "host": "nopasaran.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "69": {
    "test_id": 67,
    "description": "':authority' MUST NOT include the deprecated userinfo subcomponent for \"http\" or \"https\" schemed URIs.",
    "timestamp": "2025-04-10 11:40:42",
    "result": {
      "description": "':authority' MUST NOT include the deprecated userinfo subcomponent for \"http\" or \"https\" schemed URIs.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '/', ':authority': 'user:pass@example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "user:pass@example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "70": {
    "test_id": 68,
    "description": "The \":path\" pseudo-header field MUST NOT be empty for \"http\" or \"https\" URIs; \"http\" or \"https\" URIs that do not contain a path component MUST include a value of '/'.",
    "timestamp": "2025-04-10 11:41:02",
    "result": {
      "description": "The \":path\" pseudo-header field MUST NOT be empty for \"http\" or \"https\" URIs; \"http\" or \"https\" URIs that do not contain a path component MUST include a value of '/'.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':path': '', ':authority': 'example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":path": "",
                  ":authority": "example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "71": {
    "test_id": 69,
    "description": "All HTTP/2 requests MUST include exactly one valid value for the \":method\", \":scheme\", and \":path\" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :method missing)",
    "timestamp": "2025-04-10 11:41:22",
    "result": {
      "description": "All HTTP/2 requests MUST include exactly one valid value for the \":method\", \":scheme\", and \":path\" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :method missing)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':scheme': 'http', ':path': '/', ':authority': 'example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "72": {
    "test_id": 70,
    "description": "All HTTP/2 requests MUST include exactly one valid value for the \":method\", \":scheme\", and \":path\" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :scheme missing)",
    "timestamp": "2025-04-10 11:41:48",
    "result": {
      "description": "All HTTP/2 requests MUST include exactly one valid value for the \":method\", \":scheme\", and \":path\" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :scheme missing)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':path': '/', ':authority': 'example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":path": "/",
                  ":authority": "example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "73": {
    "test_id": 103,
    "description": "All HTTP/2 requests MUST include exactly one valid value for the \":method\", \":scheme\", and \":path\" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :path missing)",
    "timestamp": "2025-04-10 12:05:32",
    "result": {
      "description": "All HTTP/2 requests MUST include exactly one valid value for the \":method\", \":scheme\", and \":path\" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :path missing)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'GET', ':scheme': 'http', ':authority': 'example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "GET",
                  ":scheme": "http",
                  ":authority": "example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "74": {
    "test_id": 72,
    "description": "A client cannot push. Thus, servers MUST treat the receipt of a PUSH_PROMISE frame as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:43:14",
    "result": {
      "description": "A client cannot push. Thus, servers MUST treat the receipt of a PUSH_PROMISE frame as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'PUSH_PROMISE', 'flags': {'END_STREAM': True}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "PUSH_PROMISE",
                "flags": {
                  "END_STREAM": true
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "75": {
    "test_id": 31,
    "description": "With the CONNECT method, the \" :scheme\" and \" :path\" pseudo-header fields MUST be omitted. (Tested with only :path present)",
    "timestamp": "2025-04-10 11:20:21",
    "result": {
      "description": "With the CONNECT method, the \" :scheme\" and \" :path\" pseudo-header fields MUST be omitted. (Tested with only :path present)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'CONNECT', ':path': '/', ':authority': 'example.com:80'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "CONNECT",
                  ":path": "/",
                  ":authority": "example.com:80"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "76": {
    "test_id": 32,
    "description": "With the CONNECT method, the \" :scheme\" and \" :path\" pseudo-header fields MUST be omitted. (Tested with only :scheme present)",
    "timestamp": "2025-04-10 11:20:40",
    "result": {
      "description": "With the CONNECT method, the \" :scheme\" and \" :path\" pseudo-header fields MUST be omitted. (Tested with only :scheme present)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'CONNECT', ':scheme': 'http', ':authority': 'example.com:80'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "CONNECT",
                  ":scheme": "http",
                  ":authority": "example.com:80"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "77": {
    "test_id": 74,
    "description": "With the CONNECT method, the \":scheme\" and \":path\" pseudo-header fields MUST be omitted. (Tested with both present)",
    "timestamp": "2025-04-10 11:44:14",
    "result": {
      "description": "With the CONNECT method, the \":scheme\" and \":path\" pseudo-header fields MUST be omitted. (Tested with both present)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'CONNECT', ':scheme': 'http', ':path': '/', ':authority': 'example.com:80'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "CONNECT",
                  ":scheme": "http",
                  ":path": "/",
                  ":authority": "example.com:80"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "78": {
    "test_id": 75,
    "description": "With the CONNECT method, The \":authority\" pseudo-header field contains the host and port to connect to",
    "timestamp": "2025-04-10 11:44:34",
    "result": {
      "description": "With the CONNECT method, The \":authority\" pseudo-header field contains the host and port to connect to",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':method': 'CONNECT', ':authority': 'example.com'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "headers": {
                  ":method": "CONNECT",
                  ":authority": "example.com"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "79": {
    "test_id": 108,
    "description": "Values greater than 16,384 MUST NOT be sent unless receiver has set larger SETTINGS_MAX_FRAME_SIZE. (server side)",
    "timestamp": "2025-04-10 12:08:53",
    "result": {
      "description": "Values greater than 16,384 MUST NOT be sent unless receiver has set larger SETTINGS_MAX_FRAME_SIZE. (server side)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "80": {
    "test_id": 109,
    "description": "The frame type determines the format and semantics of the frame. Implementations MUST ignore and discard frames of unknown types. (server side)",
    "timestamp": "2025-04-10 12:09:38",
    "result": {
      "description": "The frame type determines the format and semantics of the frame. Implementations MUST ignore and discard frames of unknown types. (server side)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "81": {
    "test_id": 110,
    "description": "A reserved 1-bit field. The semantics of this bit are undefined, and the bit MUST remain unset (0x00) when sending and MUST be ignored when receiving. (server side)",
    "timestamp": "2025-04-10 12:09:58",
    "result": {
      "description": "A reserved 1-bit field. The semantics of this bit are undefined, and the bit MUST remain unset (0x00) when sending and MUST be ignored when receiving. (server side)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "82": {
    "test_id": 5,
    "description": "If this stream (initially in the idle state) is initiated by the server, as described in Section 5.1.1, then receiving a HEADERS frame MUST also be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:08:38",
    "result": {
      "description": "If this stream (initially in the idle state) is initiated by the server, as described in Section 5.1.1, then receiving a HEADERS frame MUST also be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0c1c3b81ec78d-MEL'), ('x-forwarded-for', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'stream_id': 2}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 08:08:36 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=gxKY4SK5Mxy4iNTyXjm1Ufnv2Euuf12gLz9lH07RzIIDnllbVRlFrjkQHG6AX8vuYIlJjanCJbjYFRwOF7mWvOO5%2FWAi8tuXlINq8Sg84rOXW%2FqXsLNwrd37xyWnDgkp49UUGg7JpU8%2BzRCROpyQvOQ6Rgs%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e0c1c3b81ec78d-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1446&min_rtt=1194&rtt_var=661&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4092&recv_bytes=899&delivery_rate=2367947&cwnd=256&unsent_bytes=0&cid=76b80347bc2725ae&ts=4961&x=0\"')]>"
          }
        }
      }
    }
  },
  "83": {
    "test_id": 6,
    "description": "An endpoint MUST NOT send any type of frame other than HEADERS, RST_STREAM, or PRIORITY in the reserved (local) state.",
    "timestamp": "2025-04-10 11:08:59",
    "result": {
      "description": "An endpoint MUST NOT send any type of frame other than HEADERS, RST_STREAM, or PRIORITY in the reserved (local) state.",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0c233ebbc2649-MEL'), ('x-forwarded-for', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'PUSH_PROMISE'}, {'type': 'DATA', 'stream_id': 2}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/2 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 08:08:54 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pga36pBbiu9a3F6ViFaewKCEzUg52Qd%2Fzs7wGGunf4JS65Q3oxmBdk22POAMtDykzDG0%2BKMmW7YRkOyju4H8Bg1SYkNYba8TsC4H4cqZA608dSdYllKXaz9e77o5BeId75L1PQ3BXQbLT%2FVzdXCUhCvQwlA%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e0c233ebbc2649-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1456&min_rtt=1233&rtt_var=619&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4096&recv_bytes=899&delivery_rate=2324237&cwnd=256&unsent_bytes=0&cid=715e8cd5f0ac850f&ts=4975&x=0\"')]>"
          }
        }
      }
    }
  },
  "84": {
    "test_id": 106,
    "description": "Receiving any frame other than HEADERS or PRIORITY on a stream in this (idle) state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR. (server side)",
    "timestamp": "2025-04-10 12:07:28",
    "result": {
      "description": "Receiving any frame other than HEADERS or PRIORITY on a stream in this (idle) state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL_ERROR. (server side)",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('x-forwarded-for', '172.236.62.68'), ('user-agent', 'nopasaran-http2-client'), ('cf-ray', '92e117e86ed62b30-MEL'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-connecting-ip', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('cf-visitor', '{\"scheme\":\"https\"}')]>]",
            "sent_frames": "[{'type': 'DATA', 'stream_id': 5}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 09:07:25 GMT'), ('content-length', '0'), ('server', 'cloudflare'), ('cache-control', 'private, no-store'), ('cf-cache-status', 'DYNAMIC'), ('cf-ray', '92e117e86ed62b30-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400')]>"
          }
        }
      }
    }
  },
  "85": {
    "test_id": 107,
    "description": "If an endpoint receives additional frames, other than WINDOW_UPDATE, PRIORITY, or RST_STREAM, for a stream that is in the half-closed (remote) state, it MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (server side)",
    "timestamp": "2025-04-10 12:07:48",
    "result": {
      "description": "If an endpoint receives additional frames, other than WINDOW_UPDATE, PRIORITY, or RST_STREAM, for a stream that is in the half-closed (remote) state, it MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (server side)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "86": {
    "test_id": 144,
    "description": "An endpoint MUST NOT send frames other than PRIORITY on a closed stream.",
    "timestamp": "2025-04-10 12:36:03",
    "result": {
      "description": "An endpoint MUST NOT send frames other than PRIORITY on a closed stream.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'RST_STREAM'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "87": {
    "test_id": 12,
    "description": "Streams initiated by a server MUST use even-numbered stream identifiers.",
    "timestamp": "2025-04-10 11:12:02",
    "result": {
      "description": "Streams initiated by a server MUST use even-numbered stream identifiers.",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0c6ac7bf97c19-MEL'), ('x-forwarded-for', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'stream_id': 5}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 08:11:57 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=F3LCOPtPoSRQ1CsPFJRGie27t5bNi4fqAnJXoKGsPSRBY9RwjFun%2BY0NeMRI3aRjoy38mkUB49%2FvuOJ%2B7pVTA4fSrRUFHNuEI7gO%2FDlWa8nktJXqaIIENIiNVEi9msEOl5KkAQ%2B80kvPLet7JBw5U6U8Nuk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e0c6ac7bf97c19-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1577&min_rtt=1258&rtt_var=738&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4094&recv_bytes=899&delivery_rate=2198936&cwnd=256&unsent_bytes=0&cid=6c8e3f924583c6c9&ts=4971&x=0\"')]>"
          }
        }
      }
    }
  },
  "88": {
    "test_id": 14,
    "description": "An endpoint MUST NOT send a RST_STREAM in response to a RST_STREAM frame",
    "timestamp": "2025-04-10 11:12:44",
    "result": {
      "description": "An endpoint MUST NOT send a RST_STREAM in response to a RST_STREAM frame",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'RST_STREAM'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "RST_STREAM"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "89": {
    "test_id": 148,
    "description": "DATA frames MUST be associated with a stream.",
    "timestamp": "2025-04-10 12:40:15",
    "result": {
      "description": "DATA frames MUST be associated with a stream.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "90": {
    "test_id": 149,
    "description": "If a DATA frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 12:40:35",
    "result": {
      "description": "If a DATA frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "91": {
    "test_id": 150,
    "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the idle state.)",
    "timestamp": "2025-04-10 12:41:00",
    "result": {
      "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the idle state.)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "92": {
    "test_id": 151,
    "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the half-closed (remote) state.)",
    "timestamp": "2025-04-10 12:41:40",
    "result": {
      "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the half-closed (remote) state.)",
      "result": {
        "Worker_2": {
          "State": "FINAL",
          "Variables": {
            "server_result": "Successfully received all 1/1 frames.",
            "client_result": "Successfully received all 2/2 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e14a00fde5e6c7-PHX'), ('cdn-loop', 'cloudflare; loops=1'), ('accept', '*/*'), ('cf-ipcountry', 'AU'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': True}}, {'type': 'DATA'}]"
          }
        },
        "Worker_1": {
          "State": "FINAL",
          "Variables": {
            "client_result": "Successfully received all 2/2 frames.",
            "server_result": "Successfully received all 1/1 frames.",
            "frames_received": "[<ResponseReceived stream_id:3, headers:[(':status', '200'), ('date', 'Thu, 10 Apr 2025 09:41:33 GMT'), ('content-type', 'text/plain'), ('cf-cache-status', 'DYNAMIC'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=VyALJ2pcrAQW1ErK15jfPNjAIL34aLegTl45vYUpi8uwNHL%2Bd96f69iHycMNI6vzqIODhYBpAagMOU9g6sPVMdKCynLTEpydnkeaV9fAf2SufVgEFtzIhbaLJLecKc4fztWPFt4F46fjmVEwANdAQTPFgLY%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('server', 'cloudflare'), ('cf-ray', '92e14a00fde5e6c7-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1587&min_rtt=1237&rtt_var=789&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4089&recv_bytes=899&delivery_rate=2212375&cwnd=256&unsent_bytes=0&cid=b2580468cd5f2daa&ts=752&x=0\"')]>, <DataReceived stream_id:None, flow_controlled_length:None, data:>]",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]"
          }
        }
      }
    }
  },
  "93": {
    "test_id": 152,
    "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the closed state.)",
    "timestamp": "2025-04-10 12:41:59",
    "result": {
      "description": "If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM_CLOSED. (Tested in the closed state.)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "94": {
    "test_id": 153,
    "description": "A HEADERS frame without the END_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream.",
    "timestamp": "2025-04-10 12:42:59",
    "result": {
      "description": "A HEADERS frame without the END_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "95": {
    "test_id": 154,
    "description": "If a HEADERS frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 12:43:18",
    "result": {
      "description": "If a HEADERS frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "96": {
    "test_id": 111,
    "description": "If a PRIORITY frame is received with a stream identifier of 0x00, the recipient MUST respond with a connection error of type PROTOCOL_ERROR. (server side)",
    "timestamp": "2025-04-10 12:10:18",
    "result": {
      "description": "If a PRIORITY frame is received with a stream identifier of 0x00, the recipient MUST respond with a connection error of type PROTOCOL_ERROR. (server side)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "97": {
    "test_id": 16,
    "description": "After receiving a RST_STREAM on a stream, the receiver MUST NOT send additional frames for that stream, except for PRIORITY",
    "timestamp": "2025-04-10 11:13:23",
    "result": {
      "description": "After receiving a RST_STREAM on a stream, the receiver MUST NOT send additional frames for that stream, except for PRIORITY",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 2 frames.",
            "sent_frames": "[{'type': 'HEADERS'}, {'type': 'RST_STREAM'}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS"
              },
              {
                "type": "RST_STREAM"
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "98": {
    "test_id": 112,
    "description": "If a RST_STREAM frame is received with a stream identifier of 0x00, the recipient MUST treat this as a connection error (Section 5.4.1) of type PROTOCOL_ERROR. (server side)",
    "timestamp": "2025-04-10 12:10:57",
    "result": {
      "description": "If a RST_STREAM frame is received with a stream identifier of 0x00, the recipient MUST treat this as a connection error (Section 5.4.1) of type PROTOCOL_ERROR. (server side)",
      "result": {
        "Worker_2": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame with error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'RST_STREAM', 'stream_id': 0}]",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e11d050d05e6e9-PHX'), ('cdn-loop', 'cloudflare; loops=1'), ('accept', '*/*'), ('cf-ipcountry', 'AU'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "result": "Successfully received all 1/1 frames."
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 09:10:50 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=fmbiabjp%2Fk7d%2FKsxYDsfouYHhsAxCqlGV0BREW6We1bOiQ8dSUi06oi%2ByemmMtrsnFMqWi6zjh%2FVbMqUaIBEhzR0OwBj3W7PDvvnk%2B58lsic%2B%2B6HAGm%2Bd31Z1G67Q7cxiqiY5CqiveZq7i5bAZJfb0BzJpU%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e11d050d05e6e9-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1467&min_rtt=1199&rtt_var=593&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4096&recv_bytes=899&delivery_rate=2244961&cwnd=245&unsent_bytes=0&cid=eec6d03c76d31589&ts=510&x=0\"')]>"
          }
        }
      }
    }
  },
  "99": {
    "test_id": 114,
    "description": "A RST_STREAM frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR. (server side)",
    "timestamp": "2025-04-10 12:12:42",
    "result": {
      "description": "A RST_STREAM frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR. (server side)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "100": {
    "test_id": 145,
    "description": "RST_STREAM frames MUST NOT be sent for a stream in the 'idle' state.",
    "timestamp": "2025-04-10 12:37:03",
    "result": {
      "description": "RST_STREAM frames MUST NOT be sent for a stream in the 'idle' state.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "101": {
    "test_id": 146,
    "description": "RST_STREAM frames MUST be associated with a stream.",
    "timestamp": "2025-04-10 12:38:03",
    "result": {
      "description": "RST_STREAM frames MUST be associated with a stream.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "102": {
    "test_id": 113,
    "description": "When set, the ACK flag indicates that this frame acknowledges receipt and application of the peer's SETTINGS frame. When this bit is set, the frame payload of the SETTINGS frame MUST be empty. (server side)",
    "timestamp": "2025-04-10 12:11:43",
    "result": {
      "description": "When set, the ACK flag indicates that this frame acknowledges receipt and application of the peer's SETTINGS frame. When this bit is set, the frame payload of the SETTINGS frame MUST be empty. (server side)",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e11e252ebdf0d4-TLL'), ('cdn-loop', 'cloudflare; loops=1'), ('accept', '*/*'), ('cf-ipcountry', 'AU'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'SETTINGS', 'flags': {'ACK': True}, 'settings': {'MAX_CONCURRENT_STREAMS': 100}}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 09:11:41 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=uOHZfOch1p6QtUkdxDnJA%2FayzavEwjmYV0jMB0Eyo%2BTZ7aKqwx%2B8YEq8EHcvUoC54zi1hx%2FDHiu3VENwvHuublgbK6ck9%2FoxTRHkr9dv2z4CnjylQSJ%2FampY1nPvOK7XAgMTk5keTx3kotjHp%2FI1O11fHYM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e11e252ebdf0d4-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1438&min_rtt=1186&rtt_var=604&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4090&recv_bytes=899&delivery_rate=2364081&cwnd=253&unsent_bytes=0&cid=14628bae12bba719&ts=5503&x=0\"')]>"
          }
        }
      }
    }
  },
  "103": {
    "test_id": 115,
    "description": "The stream identifier for a SETTINGS frame MUST be zero (0x00).",
    "timestamp": "2025-04-10 12:13:41",
    "result": {
      "description": "The stream identifier for a SETTINGS frame MUST be zero (0x00).",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "104": {
    "test_id": 116,
    "description": "A SETTINGS frame with a length other than a multiple of 6 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.",
    "timestamp": "2025-04-10 12:14:07",
    "result": {
      "description": "A SETTINGS frame with a length other than a multiple of 6 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "105": {
    "test_id": 23,
    "description": "A server MUST NOT explicitly set this value (SETTINGS_ENABLE_PUSH) to 1. A server MAY choose to omit this setting (SETTINGS_ENABLE_PUSH) when it sends a SETTINGS frame, but if a server does include a value, it MUST be 0.",
    "timestamp": "2025-04-10 11:15:46",
    "result": {
      "description": "A server MUST NOT explicitly set this value (SETTINGS_ENABLE_PUSH) to 1. A server MAY choose to omit this setting (SETTINGS_ENABLE_PUSH) when it sends a SETTINGS frame, but if a server does include a value, it MUST be 0.",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0cc29dfb6e6cd-MEL'), ('x-forwarded-for', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'SETTINGS', 'settings': {'ENABLE_PUSH': 1}}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 520 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '520'), ('date', 'Thu, 10 Apr 2025 08:15:42 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=V158xTKThfP%2BIRQ%2BP8F%2FST%2BNTu97m6T332b49Vb5ABne%2BA7OYjflKmofHt1NbJ39YIED494Zph6Mo6Q2MJJSuup1xoIR6tYzvE7R6dmiDspSYlKpXV%2B0aqus%2BdBQ92fML0Mz8IjeY9r8e4yDGWvKrDzvDvM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e0cc29dfb6e6cd-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1549&min_rtt=1242&rtt_var=677&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4090&recv_bytes=899&delivery_rate=2267815&cwnd=256&unsent_bytes=0&cid=9de18a68d7a1026d&ts=4974&x=0\"')]>"
          }
        }
      }
    }
  },
  "106": {
    "test_id": 24,
    "description": "A server MUST NOT send a PUSH_PROMISE frame if it receives the SETTINGS_ENABLE_PUSH (0x02) parameter set to a value of 0.",
    "timestamp": "2025-04-10 11:16:06",
    "result": {
      "description": "A server MUST NOT send a PUSH_PROMISE frame if it receives the SETTINGS_ENABLE_PUSH (0x02) parameter set to a value of 0.",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0ccae9c972b31-MEL'), ('x-forwarded-for', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'PUSH_PROMISE'}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 08:16:04 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=gF8odafBK5DzByAcc9aqL01hjdANGkGEwFQ6kC0nb2h3XDYbYaTeMtittyv9CJPjCTtHlU5o%2FzriAzi9QV3hsi2wldGjSdENhCnPoXuT7LRo5oWhcysWBgpJOwGE3IyyaJArDd5Dt0lf0IAwmg8zEJlnenM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e0ccae9c972b31-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1478&min_rtt=1206&rtt_var=666&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4096&recv_bytes=899&delivery_rate=2314948&cwnd=256&unsent_bytes=0&cid=110953f8abe1dc1d&ts=4984&x=0\"')]>"
          }
        }
      }
    }
  },
  "107": {
    "test_id": 117,
    "description": "For SETTINGS_INITIAL_WINDOW_SIZE, values above the maximum flow-control window size of 2^31-1 (2147483647) MUST be treated as a connection error (Section 5.4.1) of type FLOW_CONTROL_ERROR.",
    "timestamp": "2025-04-10 12:16:15",
    "result": {
      "description": "For SETTINGS_INITIAL_WINDOW_SIZE, values above the maximum flow-control window size of 2^31-1 (2147483647) MUST be treated as a connection error (Section 5.4.1) of type FLOW_CONTROL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "108": {
    "test_id": 118,
    "description": "The value advertised by an endpoint MUST be between initial value (2^14 = 16,384) and maximum allowed frame size (2^24-1 = 16,777,215 octets), inclusive.",
    "timestamp": "2025-04-10 12:17:28",
    "result": {
      "description": "The value advertised by an endpoint MUST be between initial value (2^14 = 16,384) and maximum allowed frame size (2^24-1 = 16,777,215 octets), inclusive.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "109": {
    "test_id": 119,
    "description": "An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting.",
    "timestamp": "2025-04-10 12:18:34",
    "result": {
      "description": "An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "110": {
    "test_id": 155,
    "description": "Unsupported settings MUST be ignored.",
    "timestamp": "2025-04-10 12:44:18",
    "result": {
      "description": "Unsupported settings MUST be ignored.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "111": {
    "test_id": 28,
    "description": "If the Stream Identifier field of a PUSH_PROMISE frame specifies the value 0x00, a recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 11:18:42",
    "result": {
      "description": "If the Stream Identifier field of a PUSH_PROMISE frame specifies the value 0x00, a recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "112": {
    "test_id": 29,
    "description": "The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Odd-numbered Stream ID (Invalid for Server))",
    "timestamp": "2025-04-10 11:19:01",
    "result": {
      "description": "The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Odd-numbered Stream ID (Invalid for Server))",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "113": {
    "test_id": 89,
    "description": "The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Already Used Stream ID)",
    "timestamp": "2025-04-10 11:54:12",
    "result": {
      "description": "The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Already Used Stream ID)",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e104841e53f0d1-MEL'), ('x-forwarded-for', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'PUSH_PROMISE'}, {'type': 'PUSH_PROMISE'}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/2 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 08:54:11 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=aWjD5LvMU4pqg24OjgM%2B%2BHsJ7G8e7hfx%2Fcjt5QywRoKOlT4r4Np7tBpWppIHXZBfh0V99qDEquAygAYMXbnndQ%2BUpBcwVqXpEp5PqgHZcPX%2Btr3u6IBXRJyUxeFbbXyhQjCq8ZXHFTNVuBzr9PZFOCFRRsM%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e104841e53f0d1-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1451&min_rtt=1197&rtt_var=650&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4088&recv_bytes=899&delivery_rate=2377668&cwnd=254&unsent_bytes=0&cid=203562919f247f4f&ts=4975&x=0\"')]>"
          }
        }
      }
    }
  },
  "114": {
    "test_id": 90,
    "description": "The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Lower Stream ID)",
    "timestamp": "2025-04-10 11:54:52",
    "result": {
      "description": "The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Lower Stream ID)",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e10574fc29f0d9-TLL'), ('cdn-loop', 'cloudflare; loops=1'), ('accept', '*/*'), ('cf-ipcountry', 'AU'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'PUSH_PROMISE', 'promised_stream_id': 4}, {'type': 'PUSH_PROMISE', 'promised_stream_id': 2}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/2 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 08:54:49 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RGjHqShL%2B0%2FNQMZ%2FKBNN1jqidX6I9qoNI4jAnV1UEgNsAeeOCtVdwKvx2LB7Fm5rtrvAxQNnFo0eDfJ%2F3IUEIj0zp7B7CvudLWopW1bpufIPsPn0md6K%2BBZUkggoyc0SQ45XfP0uvwf3hSyQxFOP2pY1ikw%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e10574fc29f0d9-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1482&min_rtt=1198&rtt_var=675&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4093&recv_bytes=899&delivery_rate=2296590&cwnd=256&unsent_bytes=0&cid=99af0e4506c49447&ts=5528&x=0\"')]>"
          }
        }
      }
    }
  },
  "115": {
    "test_id": 91,
    "description": "A PUSH_PROMISE frame without the END_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream.",
    "timestamp": "2025-04-10 11:55:12",
    "result": {
      "description": "A PUSH_PROMISE frame without the END_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "116": {
    "test_id": 120,
    "description": "If a PING frame is received with a Stream Identifier field value other than 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 12:19:00",
    "result": {
      "description": "If a PING frame is received with a Stream Identifier field value other than 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "117": {
    "test_id": 121,
    "description": "A receiver MUST treat the receipt of a WINDOW_UPDATE frame with a flow-control window increment of 0 as a stream error (Section 5.4.2) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 12:20:18",
    "result": {
      "description": "A receiver MUST treat the receipt of a WINDOW_UPDATE frame with a flow-control window increment of 0 as a stream error (Section 5.4.2) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "TLS handshake failed: [SSL: UNSUPPORTED_PROTOCOL] unsupported protocol (_ssl.c:1000)"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "118": {
    "test_id": 122,
    "description": "A sender MUST NOT allow a flow-control window to exceed 2^31-1 octets. If a sender receives a WINDOW_UPDATE that causes a flow-control window to exceed this maximum, it MUST terminate either the stream or the connection, as appropriate.",
    "timestamp": "2025-04-10 12:21:17",
    "result": {
      "description": "A sender MUST NOT allow a flow-control window to exceed 2^31-1 octets. If a sender receives a WINDOW_UPDATE that causes a flow-control window to exceed this maximum, it MUST terminate either the stream or the connection, as appropriate.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "119": {
    "test_id": 156,
    "description": "The sender MUST NOT send a flow-controlled frame with a length that exceeds the space available in either of the flow-control windows advertised by the receiver.",
    "timestamp": "2025-04-10 12:45:24",
    "result": {
      "description": "The sender MUST NOT send a flow-controlled frame with a length that exceeds the space available in either of the flow-control windows advertised by the receiver.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "120": {
    "test_id": 38,
    "description": "A CONTINUATION frame MUST be preceded by a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set. (Using PUSH_PROMISE frame with END_HEADERS flag set)",
    "timestamp": "2025-04-10 11:24:10",
    "result": {
      "description": "A CONTINUATION frame MUST be preceded by a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set. (Using PUSH_PROMISE frame with END_HEADERS flag set)",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0d87b0ae0f0ca-TLL'), ('cdn-loop', 'cloudflare; loops=1'), ('accept', '*/*'), ('cf-ipcountry', 'AU'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'PUSH_PROMISE', 'flags': {'END_HEADERS': True}}, {'type': 'CONTINUATION'}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/2 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 08:24:07 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=QDkkQ%2FOMHuzDa2%2BMmxUeZyHtncQda3ZhixDc%2BneZNA0qKM7dGpVcyoXrJ0D3K0s4lxo1tFqA%2F0Pz69cXnUhWQqWsXsM35OMc86rZ0n%2B2PMyWmUKowKSDhpnN6vFo4MUFeHWJ2cVXcDAV8WXhkEDbYsRis8Y%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e0d87b0ae0f0ca-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1502&min_rtt=1227&rtt_var=695&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4096&recv_bytes=899&delivery_rate=2289328&cwnd=254&unsent_bytes=0&cid=33e17d92e25f0f13&ts=5505&x=0\"')]>"
          }
        }
      }
    }
  },
  "121": {
    "test_id": 124,
    "description": "If a CONTINUATION frame is received with a Stream Identifier field of 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 12:22:03",
    "result": {
      "description": "If a CONTINUATION frame is received with a Stream Identifier field of 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "122": {
    "test_id": 125,
    "description": "A CONTINUATION frame MUST be preceded by a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set. (Using HEADERS frame with END_HEADERS flag set)",
    "timestamp": "2025-04-10 12:23:14",
    "result": {
      "description": "A CONTINUATION frame MUST be preceded by a HEADERS, PUSH_PROMISE or CONTINUATION frame without the END_HEADERS flag set. (Using HEADERS frame with END_HEADERS flag set)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "123": {
    "test_id": 157,
    "description": "CONTINUATION frames MUST be associated with a stream.",
    "timestamp": "2025-04-10 12:46:30",
    "result": {
      "description": "CONTINUATION frames MUST be associated with a stream.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "124": {
    "test_id": 158,
    "description": "If the END_HEADERS flag is not set, this frame MUST be followed by another CONTINUATION frame. A receiver MUST treat the receipt of any other type of frame or a frame on a different stream as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "timestamp": "2025-04-10 12:47:30",
    "result": {
      "description": "If the END_HEADERS flag is not set, this frame MUST be followed by another CONTINUATION frame. A receiver MUST treat the receipt of any other type of frame or a frame on a different stream as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "125": {
    "test_id": 126,
    "description": "Trailers MUST NOT include pseudo-header fields (Section 8.3).",
    "timestamp": "2025-04-10 12:24:19",
    "result": {
      "description": "Trailers MUST NOT include pseudo-header fields (Section 8.3).",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "126": {
    "test_id": 159,
    "description": "Other frames (from any stream) MUST NOT occur between the HEADERS frame and any CONTINUATION frames that might follow.",
    "timestamp": "2025-04-10 12:48:30",
    "result": {
      "description": "Other frames (from any stream) MUST NOT occur between the HEADERS frame and any CONTINUATION frames that might follow.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "127": {
    "test_id": 160,
    "description": "An endpoint that receives a HEADERS frame without the END_STREAM flag set after receiving the HEADERS frame that opens a request or after receiving a final (non-informational) status code MUST treat the corresponding request or response as malformed (Section 8.1.1).",
    "timestamp": "2025-04-10 12:49:15",
    "result": {
      "description": "An endpoint that receives a HEADERS frame without the END_STREAM flag set after receiving the HEADERS frame that opens a request or after receiving a final (non-informational) status code MUST treat the corresponding request or response as malformed (Section 8.1.1).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "128": {
    "test_id": 127,
    "description": "Field names MUST be converted to lowercase when constructing an HTTP/2 message.",
    "timestamp": "2025-04-10 12:25:04",
    "result": {
      "description": "Field names MUST be converted to lowercase when constructing an HTTP/2 message.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "129": {
    "test_id": 128,
    "description": "Field names MUST NOT contain control characters (0x00-0x1F)",
    "timestamp": "2025-04-10 12:25:24",
    "result": {
      "description": "Field names MUST NOT contain control characters (0x00-0x1F)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "130": {
    "test_id": 129,
    "description": "Field names MUST NOT contain ASCII SP (0x20)",
    "timestamp": "2025-04-10 12:26:03",
    "result": {
      "description": "Field names MUST NOT contain ASCII SP (0x20)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "131": {
    "test_id": 130,
    "description": "Field names MUST NOT contain DEL character (0x7F)",
    "timestamp": "2025-04-10 12:27:09",
    "result": {
      "description": "Field names MUST NOT contain DEL character (0x7F)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "132": {
    "test_id": 131,
    "description": "Field names MUST NOT contain high byte characters (0x80-0xFF)",
    "timestamp": "2025-04-10 12:27:36",
    "result": {
      "description": "Field names MUST NOT contain high byte characters (0x80-0xFF)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "133": {
    "test_id": 132,
    "description": "With the exception of pseudo-header fields (Section 8.3), which have a name that starts with a single colon, field names MUST NOT include a colon (ASCII COLON, 0x3a).",
    "timestamp": "2025-04-10 12:27:56",
    "result": {
      "description": "With the exception of pseudo-header fields (Section 8.3), which have a name that starts with a single colon, field names MUST NOT include a colon (ASCII COLON, 0x3a).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "134": {
    "test_id": 133,
    "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the start of the value)",
    "timestamp": "2025-04-10 12:28:16",
    "result": {
      "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the start of the value)",
      "result": {
        "Worker_2": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame with error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':status': '200', 'x-lf-start': '\\nvalue'}, 'test': {'function': 'check_header_field', 'params': {'name': 'x-lf-start'}, 'if_true': 'UNMODIFIED', 'if_false': 'MODIFIED'}}]",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e136601dd7bceb-PHX'), ('cdn-loop', 'cloudflare; loops=1'), ('accept', '*/*'), ('cf-ipcountry', 'AU'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "result": "Successfully received all 1/1 frames."
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 09:28:09 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=DXI85GhLjjjeouB2IlG1tuCL7nkITS23FLHZTrrxqdbdLCp%2FZZkrw5bYmYpAgk4T51%2B8jCGAEbbxB36B1lEUhxp3nTvBUn5DQoSFfRakXwVCaP%2BwqMW5IoGQY65qZY3AioCYvCbR799OVQwOHHOqWsXuESE%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e136601dd7bceb-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1479&min_rtt=1247&rtt_var=589&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4087&recv_bytes=899&delivery_rate=2264268&cwnd=255&unsent_bytes=0&cid=ddf853012e6c418d&ts=646&x=0\"')]>"
          }
        }
      }
    }
  },
  "135": {
    "test_id": 134,
    "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the start of the value)",
    "timestamp": "2025-04-10 12:28:35",
    "result": {
      "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the start of the value)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "136": {
    "test_id": 135,
    "description": "A field value MUST NOT start with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09).",
    "timestamp": "2025-04-10 12:28:55",
    "result": {
      "description": "A field value MUST NOT start with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "137": {
    "test_id": 136,
    "description": "A field value MUST NOT end with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09).",
    "timestamp": "2025-04-10 12:29:21",
    "result": {
      "description": "A field value MUST NOT end with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "138": {
    "test_id": 161,
    "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the middle of the value)",
    "timestamp": "2025-04-10 12:50:21",
    "result": {
      "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the middle of the value)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "139": {
    "test_id": 162,
    "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the end of the value)",
    "timestamp": "2025-04-10 12:51:32",
    "result": {
      "description": "A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the end of the value)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "140": {
    "test_id": 163,
    "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the middle of the value)",
    "timestamp": "2025-04-10 12:52:38",
    "result": {
      "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the middle of the value)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "141": {
    "test_id": 164,
    "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the end of the value)",
    "timestamp": "2025-04-10 12:53:04",
    "result": {
      "description": "A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the end of the value)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "142": {
    "test_id": 137,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing connection header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 12:30:12",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing connection header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "143": {
    "test_id": 138,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing proxy-connection header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 12:31:23",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing proxy-connection header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "144": {
    "test_id": 139,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing keep-alive header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 12:32:04",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing keep-alive header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "145": {
    "test_id": 140,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing transfer-encoding header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 12:32:43",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing transfer-encoding header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 520 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '520'), ('date', 'Thu, 10 Apr 2025 09:32:36 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=yIK0i8cHGOzKc5Mggc9YumTI9WGbukFpmw4q53%2BNrgViRRTRHtCSLtu5ZxcdHlL4WMl0eFEqEAjwZkvLeLUr0gJ6h%2BJMiNV7NAUw2wS8UKq8R92lIBJ6iVUFdufi4iFovofgYsXSSRDnNmsgVTmQpRom7Ak%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e13ce53e9a08a3-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1501&min_rtt=1257&rtt_var=648&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4092&recv_bytes=899&delivery_rate=2243222&cwnd=256&unsent_bytes=0&cid=acd641224c19ff0e&ts=743&x=0\"')]>"
          }
        },
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e13ce53e9a08a3-PHX'), ('cdn-loop', 'cloudflare; loops=1'), ('accept', '*/*'), ('cf-ipcountry', 'AU'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':status': '200', 'transfer-encoding': 'chunked'}, 'test': {'function': 'check_header_field', 'params': {'name': 'transfer-encoding'}, 'if_true': 'UNMODIFIED', 'if_false': 'MODIFIED'}}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        }
      }
    }
  },
  "146": {
    "test_id": 141,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing upgrade header field (RFC9113 Section 8.2.2)",
    "timestamp": "2025-04-10 12:33:49",
    "result": {
      "description": "An endpoint MUST NOT generate an HTTP/2 message containing upgrade header field (RFC9113 Section 8.2.2)",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "147": {
    "test_id": 142,
    "description": "The TE header field MAY be present in an HTTP/2 request; when it is, it MUST NOT contain any value other than 'trailers'.",
    "timestamp": "2025-04-10 12:34:48",
    "result": {
      "description": "The TE header field MAY be present in an HTTP/2 request; when it is, it MUST NOT contain any value other than 'trailers'.",
      "result": {
        "Worker_2": {
          "State": "ERROR",
          "Variables": {
            "msg": "Connection established but client negotiated no protocol instead of HTTP/2"
          }
        },
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        }
      }
    }
  },
  "148": {
    "test_id": 58,
    "description": "Pseudo-header fields defined for requests MUST NOT appear in responses.",
    "timestamp": "2025-04-10 11:35:07",
    "result": {
      "description": "Pseudo-header fields defined for requests MUST NOT appear in responses.",
      "result": {
        "Worker_2": {
          "State": "FINAL",
          "Variables": {
            "server_result": "Successfully received all 1/1 frames.",
            "client_result": "Test result: MODIFIED",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('x-forwarded-for', '172.236.62.68'), ('user-agent', 'nopasaran-http2-client'), ('cf-ray', '92e0e8a8fc306b92-MEL'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-connecting-ip', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('cf-visitor', '{\"scheme\":\"https\"}')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {':status': '200', ':method': 'GET'}, 'test': {'function': 'check_header_field', 'params': {'name': ':method'}, 'if_true': 'UNMODIFIED', 'if_false': 'MODIFIED'}}]"
          }
        },
        "Worker_1": {
          "State": "FINAL",
          "Variables": {
            "client_result": "Test result: MODIFIED",
            "server_result": "Successfully received all 1/1 frames.",
            "frames_received": "[<ResponseReceived stream_id:3, headers:[(':status', '200'), ('date', 'Thu, 10 Apr 2025 08:35:05 GMT'), ('cf-cache-status', 'DYNAMIC'), ('server', 'cloudflare'), ('cf-ray', '92e0e8a8fc306b92-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]"
          }
        }
      }
    }
  },
  "149": {
    "test_id": 61,
    "description": "All pseudo-header fields sent from a server MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1).",
    "timestamp": "2025-04-10 11:37:26",
    "result": {
      "description": "All pseudo-header fields sent from a server MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1).",
      "result": {
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 520 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '520'), ('date', 'Thu, 10 Apr 2025 08:37:18 GMT'), ('content-length', '0'), ('server', 'cloudflare'), ('cache-control', 'private, no-store'), ('cf-cache-status', 'DYNAMIC'), ('cf-ray', '92e0ebe29c272b36-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400')]>"
          }
        },
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('x-forwarded-for', '172.236.62.68'), ('user-agent', 'nopasaran-http2-client'), ('cf-ray', '92e0ebe29c272b36-MEL'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-connecting-ip', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('cf-visitor', '{\"scheme\":\"https\"}')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {'date': '2024-01-01', ':status': '200'}}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        }
      }
    }
  },
  "150": {
    "test_id": 64,
    "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a response frame with the same value.",
    "timestamp": "2025-04-10 11:38:50",
    "result": {
      "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a response frame with the same value.",
      "result": {
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 520 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '520'), ('date', 'Thu, 10 Apr 2025 08:38:45 GMT'), ('content-length', '0'), ('server', 'cloudflare'), ('cache-control', 'private, no-store'), ('cf-cache-status', 'DYNAMIC'), ('cf-ray', '92e0ee032d38e9a6-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400')]>"
          }
        },
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('x-forwarded-for', '172.236.62.68'), ('user-agent', 'nopasaran-http2-client'), ('cf-ray', '92e0ee032d38e9a6-MEL'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-connecting-ip', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('cf-visitor', '{\"scheme\":\"https\"}')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'duplicate_headers': {':status': '200'}}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        }
      }
    }
  },
  "151": {
    "test_id": 65,
    "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a response frame with different values.",
    "timestamp": "2025-04-10 11:39:10",
    "result": {
      "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a response frame with different values.",
      "result": {
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 520 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '520'), ('date', 'Thu, 10 Apr 2025 08:39:02 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=j7f7SLSHR5Gjj%2Bd2Fl60mNRp9G5yd3m5zg5rzOjQbLR2uUphYzKxGW40rnSEg%2BPtLGgZ%2FF0ybTDWUStq0KHiCJZjDWFowbniMRsTo%2BOpLSWDPfY4DlOLbmh%2FijxJCphCd4ShB3kqsE7tCKn2g%2BWluR%2FIev8%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e0ee727c3b29a4-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1469&min_rtt=1224&rtt_var=627&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4094&recv_bytes=899&delivery_rate=2316800&cwnd=255&unsent_bytes=0&cid=51a44e2ff55da447&ts=871&x=0\"')]>"
          }
        },
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e0ee727c3b29a4-MEL'), ('x-forwarded-for', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'duplicate_headers': {':status': '201'}}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        }
      }
    }
  },
  "152": {
    "test_id": 143,
    "description": "Pseudo-header fields are not HTTP header fields. Endpoints MUST NOT generate pseudo-header fields other than those defined in this document.",
    "timestamp": "2025-04-10 12:35:02",
    "result": {
      "description": "Pseudo-header fields are not HTTP header fields. Endpoints MUST NOT generate pseudo-header fields other than those defined in this document.",
      "result": {
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 521 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '521'), ('date', 'Thu, 10 Apr 2025 09:35:00 GMT'), ('content-type', 'text/plain; charset=UTF-8'), ('content-length', '15'), ('report-to', '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=HYbf%2FdbzL7S7%2Bfdm4RfK1OIadF9n6oG%2F7iqBz0ZXuJUkWn4ewJ7AcV3%2BoGGWbkqSaZWkjM63GRf43n2lqBT3tgQ2i01aJFTjTBDTLZLmoSQB6inFzgR8Fojrav9WeT7KR3YOfpZn4ZY0vIaAABIUuJ0XxOo%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}'), ('nel', '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}'), ('x-frame-options', 'SAMEORIGIN'), ('referrer-policy', 'same-origin'), ('cache-control', 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0'), ('expires', 'Thu, 01 Jan 1970 00:00:01 GMT'), ('server', 'cloudflare'), ('cf-ray', '92e14066d92a750f-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400'), ('server-timing', 'cfL4;desc=\"?proto=TCP&rtt=1958&min_rtt=1712&rtt_var=704&sent=10&recv=8&lost=0&retrans=0&sent_bytes=4093&recv_bytes=899&delivery_rate=1633389&cwnd=256&unsent_bytes=0&cid=cbb434b9c04916dc&ts=772&x=0\"')]>"
          }
        },
        "Worker_2": {
          "State": "GOAWAY_RECEIVED",
          "Variables": {
            "msg": "Connection terminated by peer: Received GOAWAY frame with error code 1. Additional data: None.",
            "sent_frames": "[{'type': 'HEADERS', 'raw_frame': True, 'headers': {':status': '200', ':version': '2.0'}}]",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('cf-ray', '92e14066d92a750f-PHX'), ('cdn-loop', 'cloudflare; loops=1'), ('accept', '*/*'), ('cf-ipcountry', 'AU'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('user-agent', 'nopasaran-http2-client'), ('x-forwarded-for', '172.236.62.68'), ('cf-visitor', '{\"scheme\":\"https\"}'), ('cf-connecting-ip', '172.236.62.68')]>]",
            "result": "Successfully received all 1/1 frames."
          }
        }
      }
    }
  },
  "153": {
    "test_id": 71,
    "description": "For HTTP/2 responses, a single \":status\" pseudo-header field is defined that carries the HTTP status code field. This pseudo-header field MUST be included in all responses, including interim responses; otherwise, the response is malformed.",
    "timestamp": "2025-04-10 11:42:28",
    "result": {
      "description": "For HTTP/2 responses, a single \":status\" pseudo-header field is defined that carries the HTTP status code field. This pseudo-header field MUST be included in all responses, including interim responses; otherwise, the response is malformed.",
      "result": {
        "Worker_2": {
          "State": "FINAL",
          "Variables": {
            "server_result": "Successfully received all 1/1 frames.",
            "client_result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('x-forwarded-for', '172.236.62.68'), ('user-agent', 'nopasaran-http2-client'), ('cf-ray', '92e0f34a4bf4f0c8-MEL'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-connecting-ip', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('cf-visitor', '{\"scheme\":\"https\"}')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'headers': {'date': '2024-01-01'}}]"
          }
        },
        "Worker_1": {
          "State": "FINAL",
          "Variables": {
            "client_result": "Successfully received all 1/1 frames.",
            "server_result": "Successfully received all 1/1 frames.",
            "frames_received": "[<ResponseReceived stream_id:3, headers:[(':status', '200'), ('date', 'Thu, 10 Apr 2025 08:42:21 GMT'), ('cf-cache-status', 'DYNAMIC'), ('server', 'cloudflare'), ('cf-ray', '92e0f34a4bf4f0c8-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400')]>]",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]"
          }
        }
      }
    }
  },
  "154": {
    "test_id": 39,
    "description": "The header fields in PUSH_PROMISE and any subsequent CONTINUATION frames MUST be a valid and complete set of request header fields.",
    "timestamp": "2025-04-10 11:24:50",
    "result": {
      "description": "The header fields in PUSH_PROMISE and any subsequent CONTINUATION frames MUST be a valid and complete set of request header fields.",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  },
  "155": {
    "test_id": 73,
    "description": "In the PUSH_PROMISE frame, the server MUST include a method in the \":method\" pseudo-header field that is safe and cacheable.",
    "timestamp": "2025-04-10 11:43:34",
    "result": {
      "description": "In the PUSH_PROMISE frame, the server MUST include a method in the \":method\" pseudo-header field that is safe and cacheable.",
      "result": {
        "Worker_2": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_SERVER_FRAMES_SENT_SERVER",
          "Variables": {
            "result": "Successfully received all 1/1 frames.",
            "frames_received": "[<RequestReceived stream_id:3, headers:[(':method', 'GET'), (':scheme', 'https'), (':authority', 'losangelescloudflare.nopasaran.co'), (':path', '/test-frame'), ('x-forwarded-for', '172.236.62.68'), ('user-agent', 'nopasaran-http2-client'), ('cf-ray', '92e0f4e65ecf4ffc-MEL'), ('accept', '*/*'), ('accept-encoding', 'gzip, br'), ('x-forwarded-proto', 'https'), ('cdn-loop', 'cloudflare; loops=1'), ('cf-connecting-ip', '172.236.62.68'), ('cf-ipcountry', 'AU'), ('cf-visitor', '{\"scheme\":\"https\"}')]>]",
            "sent_frames": "[{'type': 'PUSH_PROMISE', 'headers': {':method': 'POST', ':scheme': 'http', ':path': '/', ':authority': 'example.com'}}]",
            "msg": "Client_Failed_To_Receive_All_Frames"
          }
        },
        "Worker_1": {
          "State": "REJECTED",
          "Variables": {
            "client_result": "Received 5xx status code 525 after receiving 0/1 frames.",
            "frames_received": "<ResponseReceived stream_id:3, headers:[(':status', '525'), ('date', 'Thu, 10 Apr 2025 08:43:31 GMT'), ('content-length', '0'), ('server', 'cloudflare'), ('cache-control', 'private, no-store'), ('cf-cache-status', 'DYNAMIC'), ('cf-ray', '92e0f4e65ecf4ffc-MEL'), ('alt-svc', 'h3=\":443\"; ma=86400')]>"
          }
        }
      }
    }
  },
  "156": {
    "test_id": 166,
    "description": "HTTP/2 does not support the 101 (Switching Protocols) informational status code (Section 15.2.2 of [HTTP]).",
    "timestamp": "2025-04-10 12:54:11",
    "result": {
      "description": "HTTP/2 does not support the 101 (Switching Protocols) informational status code (Section 15.2.2 of [HTTP]).",
      "result": {
        "Worker_1": {
          "State": "CONTROL_CHANNEL_TIMEOUT_AFTER_CLIENT_FRAMES_SENT_CLIENT",
          "Variables": {
            "result": "Successfully sent 1 frames.",
            "sent_frames": "[{'type': 'HEADERS', 'flags': {'END_STREAM': 'true'}}]",
            "msg": "Server_Failed_To_Start_or_Receive_All_Frames"
          }
        },
        "Worker_2": {
          "State": "TIMEOUT",
          "Variables": {
            "ctrl": null,
            "server": null,
            "client_val": "client",
            "role": "server",
            "client_frames": [
              {
                "type": "HEADERS",
                "flags": {
                  "END_STREAM": "true"
                }
              }
            ],
            "event": "TIMEOUT",
            "result": "TIMEOUT",
            "frames_received": "[]"
          }
        }
      }
    }
  }
}