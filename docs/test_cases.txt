\documentclass{article}
\usepackage{longtable}

\begin{document}

\renewcommand{\arraystretch}{1.3}
\begin{longtable}{|c|p{14cm}|}
\hline
\# & Description \\
\hline
\endhead
0 & Control. \\
\hline
1 & Receiving any frame other than HEADERS or PRIORITY on a stream in this (idle) state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
2 & Client must send connection preface after TLS establishment \\
\hline
3 & The connection preface starts with the string: PRI * HTTP/2.0\textbackslash r\textbackslash n\textbackslash r\textbackslash nSM\textbackslash r\textbackslash n\textbackslash r\textbackslash n \\
\hline
4 & Client preface must include a SETTINGS frame \\
\hline
5 & If this stream (initially in the idle state) is initiated by the server, as described in Section 5.1.1, then receiving a HEADERS frame MUST also be treated as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
6 & An endpoint MUST NOT send any type of frame other than HEADERS, RST\_STREAM, or PRIORITY in the reserved (local) state. \\
\hline
7 & If an endpoint receives additional frames, other than WINDOW\_UPDATE, PRIORITY, or RST\_STREAM, for a stream that is in the half-closed (remote) state, it MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. \\
\hline
8 & Values greater than 16,384 MUST NOT be sent unless receiver has set larger SETTINGS\_MAX\_FRAME\_SIZE. \\
\hline
9 & The frame type determines the format and semantics of the frame. Implementations MUST ignore and discard frames of unknown types. \\
\hline
10 & A reserved 1-bit field. The semantics of this bit are undefined, and the bit MUST remain unset (0x00) when sending and MUST be ignored when receiving. \\
\hline
11 & Streams initiated by a client MUST use odd-numbered stream identifiers. \\
\hline
12 & Streams initiated by a server MUST use even-numbered stream identifiers. \\
\hline
13 & The identifier of a newly established stream MUST be numerically greater than all streams that the initiating endpoint has opened or reserved. \\
\hline
14 & An endpoint MUST NOT send a RST\_STREAM in response to a RST\_STREAM frame. \\
\hline
15 & If a PRIORITY frame is received with a stream identifier of 0x00, the recipient MUST respond with a connection error of type PROTOCOL\_ERROR. \\
\hline
16 & After receiving a RST\_STREAM on a stream, the receiver MUST NOT send additional frames for that stream, except for PRIORITY. \\
\hline
17 & If a RST\_STREAM frame is received with a stream identifier of 0x00, the recipient MUST treat this as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
18 & When set, the ACK flag indicates that this frame acknowledges receipt and application of the peer's SETTINGS frame. When this bit is set, the frame payload of the SETTINGS frame MUST be empty. \\
\hline
19 & A RST\_STREAM frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME\_SIZE\_ERROR. \\
\hline
20 & The stream identifier for a SETTINGS frame MUST be zero (0x00). \\
\hline
21 & A SETTINGS frame with a length other than a multiple of 6 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME\_SIZE\_ERROR. \\
\hline
22 & The initial value of SETTINGS\_ENABLE\_PUSH is 1. Any value other than 0 or 1 MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
23 & A server MUST NOT explicitly set this value (SETTINGS\_ENABLE\_PUSH) to 1. A server MAY choose to omit this setting (SETTINGS\_ENABLE\_PUSH) when it sends a SETTINGS frame, but if a server does include a value, it MUST be 0. \\
\hline
24 & A server MUST NOT send a PUSH\_PROMISE frame if it receives the SETTINGS\_ENABLE\_PUSH (0x02) parameter set to a value of 0. \\
\hline
25 & For SETTINGS\_INITIAL\_WINDOW\_SIZE, values above the maximum flow-control window size of $2^{31}-1$ (2147483647) MUST be treated as a connection error (Section 5.4.1) of type FLOW\_CONTROL\_ERROR. \\
\hline
26 & The value advertised by an endpoint MUST be between initial value ($2^{14} = 16,384$) and maximum allowed frame size ($2^{24}-1 = 16,777,215$ octets), inclusive. \\
\hline
27 & An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting. \\
\hline
28 & If the Stream Identifier field of a PUSH\_PROMISE frame specifies the value 0x00, a recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
29 & A receiver MUST treat the receipt of a PUSH\_PROMISE that promises an illegal stream identifier (Section 5.1.1) as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
30 & If a PING frame is received with a Stream Identifier field value other than 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
31 & With the CONNECT method, the ":scheme" and ":path" pseudo-header fields MUST be omitted. (Tested with only :path present). \\
\hline
32 & With the CONNECT method, the ":scheme" and ":path" pseudo-header fields MUST be omitted. (Tested with only :scheme present). \\
\hline
33 & A receiver MUST treat the receipt of a WINDOW\_UPDATE frame with a flow-control window increment of 0 as a stream error (Section 5.4.2) of type PROTOCOL\_ERROR. \\
\hline
34 & A sender MUST NOT allow a flow-control window to exceed $2^{31}-1$ octets. If a sender receives a WINDOW\_UPDATE that causes a flow-control window to exceed this maximum, it MUST terminate either the stream or the connection, as appropriate. \\
\hline
35 & An endpoint MUST treat a change to SETTINGS\_INITIAL\_WINDOW\_SIZE that causes any flow-control window to exceed the maximum size as a connection error (Section 5.4.1) of type FLOW\_CONTROL\_ERROR. \\
\hline
36 & If a CONTINUATION frame is received with a Stream Identifier field of 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
37 & A CONTINUATION frame MUST be preceded by a HEADERS, PUSH\_PROMISE, or CONTINUATION frame without the END\_HEADERS flag set. (Using HEADERS frame with END\_HEADERS flag set). \\
\hline
38 & A CONTINUATION frame MUST be preceded by a HEADERS, PUSH\_PROMISE, or CONTINUATION frame without the END\_HEADERS flag set. (Using PUSH\_PROMISE frame with END\_HEADERS flag set). \\
\hline
39 & The header fields in PUSH\_PROMISE and any subsequent CONTINUATION frames MUST be a valid and complete set of request header fields. \\
\hline
40 & Trailers MUST NOT include pseudo-header fields (Section 8.3). \\
\hline
41 & Field names MUST be converted to lowercase when constructing an HTTP/2 message. \\
\hline
42 & Field names MUST NOT contain control characters (0x00-0x1F). \\
\hline
43 & Field names MUST NOT contain ASCII SP (0x20). \\
\hline
44 & Field names MUST NOT contain DEL character (0x7F). \\
\hline
45 & Field names MUST NOT contain high byte characters (0x80-0xFF). \\
\hline
46 & With the exception of pseudo-header fields (Section 8.3), which have a name that starts with a single colon, field names MUST NOT include a colon (ASCII COLON, 0x3a). \\
\hline
47 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the start of the value). \\
\hline
48 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the start of the value). \\
\hline
49 & A field value MUST NOT start with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09). \\
\hline
50 & A field value MUST NOT end with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09). \\
\hline
51 & An endpoint MUST NOT generate an HTTP/2 message containing connection header field (RFC9113 Section 8.2.2). \\
\hline
52 & An endpoint MUST NOT generate an HTTP/2 message containing proxy-connection header field (RFC9113 Section 8.2.2). \\
\hline
53 & An endpoint MUST NOT generate an HTTP/2 message containing keep-alive header field (RFC9113 Section 8.2.2). \\
\hline
54 & An endpoint MUST NOT generate an HTTP/2 message containing transfer-encoding header field (RFC9113 Section 8.2.2). \\
\hline
55 & An endpoint MUST NOT generate an HTTP/2 message containing upgrade header field (RFC9113 Section 8.2.2). \\
\hline
56 & The TE header field MAY be present in an HTTP/2 request; when it is, it MUST NOT contain any value other than 'trailers'. \\
\hline
57 & Pseudo-header fields are not HTTP header fields. Endpoints MUST NOT generate pseudo-header fields other than those defined in this document. \\
\hline
58 & Pseudo-header fields defined for requests MUST NOT appear in responses. \\
\hline
59 & Pseudo-header fields defined for responses MUST NOT appear in requests. \\
\hline
60 & All pseudo-header fields sent from a client MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1). \\
\hline
61 & All pseudo-header fields sent from a server MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1). \\
\hline
62 & The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a request frame with the same value. \\
\hline
63 & The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a request frame with different values. \\
\hline
64 & The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a response frame with the same value. \\
\hline
65 & The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a response frame with different values. \\
\hline
66 & Clients MUST NOT generate a request with a Host header field that differs from the ":authority" pseudo-header field. \\
\hline
67 & ':authority' MUST NOT include the deprecated userinfo subcomponent for "http" or "https" schemed URIs. \\
\hline
68 & The ":path" pseudo-header field MUST NOT be empty for "http" or "https" URIs; "http" or "https" URIs that do not contain a path component MUST include a value of '/'. \\
\hline
69 & All HTTP/2 requests MUST include exactly one valid value for the ":method", ":scheme", and ":path" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :method missing). \\
\hline
70 & All HTTP/2 requests MUST include exactly one valid value for the ":method", ":scheme", and ":path" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :scheme missing). \\
\hline
71 & For HTTP/2 responses, a single ":status" pseudo-header field is defined that carries the HTTP status code field. This pseudo-header field MUST be included in all responses, including interim responses; otherwise, the response is malformed. \\
\hline
72 & A client cannot push. Thus, servers MUST treat the receipt of a PUSH\_PROMISE frame as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
73 & In the PUSH\_PROMISE frame, the server MUST include a method in the ":method" pseudo-header field that is safe and cacheable. \\
\hline
74 & With the CONNECT method, the ":scheme" and ":path" pseudo-header fields MUST be omitted. (Tested with both present). \\
\hline
75 & With the CONNECT method, The ":authority" pseudo-header field contains the host and port to connect to. \\
\hline
76 & An endpoint MUST NOT send frames other than PRIORITY on a closed stream. \\
\hline
77 & RST\_STREAM frames MUST NOT be sent for a stream in the 'idle' state. \\
\hline
78 & RST\_STREAM frames MUST be associated with a stream. \\
\hline
79 & Implementations MUST discard frames that have unknown or unsupported types. \\
\hline
80 & DATA frames MUST be associated with a stream. \\
\hline
81 & If a DATA frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
82 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the idle state). \\
\hline
83 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the half-closed (remote) state). \\
\hline
84 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the closed state). \\
\hline
85 & A HEADERS frame without the END\_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream. \\
\hline
86 & If a HEADERS frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
87 & A SETTINGS frame MUST be sent by both endpoints at the start of a connection and MAY be sent at any other time by either endpoint over the lifetime of the connection. (Tested from the client side). \\
\hline
88 & Unsupported settings MUST be ignored. \\
\hline
89 & The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Already Used Stream ID). \\
\hline
90 & The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Lower Stream ID). \\
\hline
91 & A PUSH\_PROMISE frame without the END\_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream. \\
\hline
92 & PUSH\_PROMISE MUST NOT be sent if the SETTINGS\_ENABLE\_PUSH setting of the peer endpoint is set to 0. \\
\hline
93 & The sender MUST NOT send a flow-controlled frame with a length that exceeds the space available in either of the flow-control windows advertised by the receiver. \\
\hline
94 & CONTINUATION frames MUST be associated with a stream. \\
\hline
95 & If the END\_HEADERS flag is not set, this frame MUST be followed by another CONTINUATION frame. A receiver MUST treat the receipt of any other type of frame or a frame on a different stream as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. \\
\hline
96 & Other frames (from any stream) MUST NOT occur between the HEADERS frame and any CONTINUATION frames that might follow. \\
\hline
97 & An endpoint that receives a HEADERS frame without the END\_STREAM flag set after receiving the HEADERS frame that opens a request or after receiving a final (non-informational) status code MUST treat the corresponding request or response as malformed (Section 8.1.1). \\
\hline
98 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the middle of the value). \\
\hline
99 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the end of the value). \\
\hline
100 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the middle of the value). \\
\hline
101 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the end of the value). \\
\hline
102 & Pseudo-header fields MUST NOT appear in a trailer section. \\
\hline
103 & All HTTP/2 requests MUST include exactly one valid value for the ":method", ":scheme", and ":path" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :path missing). \\
\hline
104 & Promised requests MUST be safe (see Section 9.2.1 of [HTTP]) and cacheable (see Section 9.2.3 of [HTTP]). \\
\hline
105 & PUSH\_PROMISE frames MUST NOT be sent by the client. \\
\hline
\caption{HTTP/2 Frame Rules and Descriptions}
\end{longtable}
