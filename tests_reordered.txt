1 & 3.2 & Client must send connection preface after TLS establishment & \checkmark \\
\hline
2 & 3.4 & the connection preface starts with the string: PRI * HTTP/2.0\textbackslash r\textbackslash n\textbackslash r\textbackslash nSM\textbackslash r\textbackslash n\textbackslash r\textbackslash n & \checkmark \\
\hline
3 & 3.4 & Client preface must include a SETTINGS frame & \checkmark \\
\hline
4 & 4.1 & Values greater than 16,384 MUST NOT be sent unless receiver has set larger SETTINGS\_MAX\_FRAME\_SIZE & \checkmark \\ 
\hline
5 & 4.1 & The frame type determines the format and semantics of the frame. Implementations MUST ignore and discard frames of unknown types. & \checkmark \\ 
\hline
6 & 4.1 & A reserved 1-bit field. The semantics of this bit are undefined, and the bit MUST remain unset (0x00) when sending and MUST be ignored when receiving. & \checkmark \\ 
\hline
7 & 4.1 & Values greater than 16,384 MUST NOT be sent unless receiver has set larger SETTINGS\_MAX\_FRAME\_SIZE. (server side) & \\ 
\hline
8 & 4.1 & The frame type determines the format and semantics of the frame. Implementations MUST ignore and discard frames of unknown types. (server side) & \\ 
\hline
9 & 4.1 & A reserved 1-bit field. The semantics of this bit are undefined, and the bit MUST remain unset (0x00) when sending and MUST be ignored when receiving. (server side) & \\ 
\hline
10 & 5.1 & Receiving any frame other than HEADERS or PRIORITY on a stream in this (idle) state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\
\hline
11 & 5.1 & If this stream (initially in the idle state) is initiated by the server, as described in Section 5.1.1, then receiving a HEADERS frame MUST also be treated as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \\
\hline
12 & 5.1 & An endpoint MUST NOT send any type of frame other than HEADERS, RST\_STREAM, or PRIORITY in the reserved (local) state. & \\
\hline
13 & 5.1 & If an endpoint receives additional frames, other than WINDOW\_UPDATE, PRIORITY, or RST\_STREAM, for a stream that is in the half-closed (remote) state, it MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. & \checkmark \\
\hline
14 & 5.1 & An endpoint MUST NOT send frames other than PRIORITY on a closed stream. & \checkmark \\ 
\hline
15 & 5.1 & Receiving any frame other than HEADERS or PRIORITY on a stream in this (idle) state MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
16 & 5.1 & If an endpoint receives additional frames, other than WINDOW\_UPDATE, PRIORITY, or RST\_STREAM, for a stream that is in the half-closed (remote) state, it MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (server side) & \\ 
\hline
17 & 5.1 & An endpoint MUST NOT send frames other than PRIORITY on a closed stream. (server side) & \\ 
\hline
18 & 5.1.1 & Streams initiated by a client MUST use odd-numbered stream identifiers. & \checkmark \\ 
\hline
19 & 5.1.1 & Streams initiated by a server MUST use even-numbered stream identifiers. & \\ 
\hline
20 & 5.1.1 & The identifier of a newly established stream MUST be numerically greater than all streams that the initiating endpoint has opened or reserved. & \checkmark \\ 
\hline
21 & 5.4.2 & An endpoint MUST NOT send a RST\_STREAM in response to a RST\_STREAM frame & \\ 
\hline
22 & 6.1 & DATA frames MUST be associated with a stream. & \checkmark \\ 
\hline
23 & 6.1 & If a DATA frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
24 & 6.1 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the idle state.) & \checkmark \\ 
\hline
25 & 6.1 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the half-closed (remote) state.) & \checkmark \\ 
\hline
26 & 6.1 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the closed state.) & \checkmark \\ 
\hline
27 & 6.1 & DATA frames MUST be associated with a stream. (server side) & \\ 
\hline
28 & 6.1 & If a DATA frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
29 & 6.1 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the idle state.) (server side) & \\ 
\hline
30 & 6.1 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the half-closed (remote) state.) (server side) & \\ 
\hline
31 & 6.1 & If a DATA frame is received whose stream is not in the 'open' or 'half-closed (local)' state, the recipient MUST respond with a stream error (Section 5.4.2) of type STREAM\_CLOSED. (Tested in the closed state.) (server side) & \\ 
\hline
32 & 6.2 & A HEADERS frame without the END\_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream. & \checkmark \\ 
\hline
33 & 6.2 & If a HEADERS frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
34 & 6.2 & A HEADERS frame without the END\_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream. (server side) & \\ 
\hline
35 & 6.2 & If a HEADERS frame is received whose Stream Identifier field is 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
36 & 6.3 & If a PRIORITY frame is received with a stream identifier of 0x00, the recipient MUST respond with a connection error of type PROTOCOL\_ERROR & \checkmark \\ 
\hline
37 & 6.3 & If a PRIORITY frame is received with a stream identifier of 0x00, the recipient MUST respond with a connection error of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
38 & 6.4 & After receiving a RST\_STREAM on a stream, the receiver MUST NOT send additional frames for that stream, except for PRIORITY & \\ 
\hline
39 & 6.4 & If a RST\_STREAM frame is received with a stream identifier of 0x00, the recipient MUST treat this as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
40 & 6.4 & A RST\_STREAM frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME\_SIZE\_ERROR. & \checkmark \\ 
\hline
41 & 6.4 & RST\_STREAM frames MUST NOT be sent for a stream in the 'idle' state. & \checkmark \\ 
\hline
42 & 6.4 & RST\_STREAM frames MUST be associated with a stream. & \checkmark \\ 
\hline
43 & 6.4 & If a RST\_STREAM frame is received with a stream identifier of 0x00, the recipient MUST treat this as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
44 & 6.4 & A RST\_STREAM frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME\_SIZE\_ERROR. (server side) & \\
\hline
45 & 6.4 & RST\_STREAM frames MUST NOT be sent for a stream in the 'idle' state. (server side) & \\ 
\hline
46 & 6.4 & RST\_STREAM frames MUST be associated with a stream. (server side) & \\ 
\hline
47 & 6.5 & When set, the ACK flag indicates that this frame acknowledges receipt and application of the peer's SETTINGS frame. When this bit is set, the frame payload of the SETTINGS frame MUST be empty. & \checkmark \\ 
\hline
48 & 6.5 & The stream identifier for a SETTINGS frame MUST be zero (0x00). & \checkmark \\ 
\hline
49 & 6.5 & A SETTINGS frame with a length other than a multiple of 6 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME\_SIZE\_ERROR. & \checkmark \\ 
\hline
50 & 6.5 & When set, the ACK flag indicates that this frame acknowledges receipt and application of the peer's SETTINGS frame. When this bit is set, the frame payload of the SETTINGS frame MUST be empty. (server side) & \\ 
\hline
51 & 6.5 & The stream identifier for a SETTINGS frame MUST be zero (0x00). (server side) & \\ 
\hline
52 & 6.5 & A SETTINGS frame with a length other than a multiple of 6 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME\_SIZE\_ERROR. (server side) & \\ 
\hline
53 & 6.5.2 & The initial value of SETTINGS\_ENABLE\_PUSH is 1. Any value other than 0 or 1 MUST be treated as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
54 & 6.5.2 & A server MUST NOT explicitly set this value (SETTINGS\_ENABLE\_PUSH) to 1. A server MAY choose to omit this setting (SETTINGS\_ENABLE\_PUSH) when it sends a SETTINGS frame, but if a server does include a value, it MUST be 0. & \\ 
\hline
55 & 6.5.2 & A server MUST NOT send a PUSH\_PROMISE frame if it receives the SETTINGS\_ENABLE\_PUSH (0x02) parameter set to a value of 0. & \\ 
\hline
56 & 6.5.2 & For SETTINGS\_INITIAL\_WINDOW\_SIZE, values above the maximum flow-control window size of $2^{31}-1$ (2147483647) MUST be treated as a connection error (Section 5.4.1) of type FLOW\_CONTROL\_ERROR. & \checkmark \\ 
\hline
57 & 6.5.2 & The value advertised by an endpoint MUST be between initial value ($2^{14} = 16,384$) and maximum allowed frame size ($2^{24}-1 = 16,777,215$ octets), inclusive. & \checkmark \\ 
\hline
58 & 6.5.2 & An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting. & \checkmark \\ 
\hline
59 & 6.5.2 & For SETTINGS\_INITIAL\_WINDOW\_SIZE, values above the maximum flow-control window size of $2^{31}-1$ (2147483647) MUST be treated as a connection error (Section 5.4.1) of type FLOW\_CONTROL\_ERROR. (server side) & \\ 
\hline
60 & 6.5.2 & The value advertised by an endpoint MUST be between initial value ($2^{14} = 16,384$) and maximum allowed frame size ($2^{24}-1 = 16,777,215$ octets), inclusive. (server side) & \\ 
\hline
61 & 6.5.2 & An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting. (server side) & \\ 
\hline
62 & 6.5.3 & Unsupported settings MUST be ignored. & \checkmark \\ 
\hline
63 & 6.5.3 & Unsupported settings MUST be ignored. (server side) & \\ 
\hline
64 & 6.6 & If the Stream Identifier field of a PUSH\_PROMISE frame specifies the value 0x00, a recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \\ 
\hline
65 & 6.6 & The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Odd-numbered Stream ID (Invalid for Server)) & \\ 
\hline
66 & 6.6 & The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Already Used Stream ID) & \\ 
\hline
67 & 6.6 & The promised stream identifier MUST be a valid choice for the next stream sent by the sender (see 'new stream identifier' in Section 5.1.1). (Using Lower Stream ID) & \\ 
\hline
68 & 6.6 & A PUSH\_PROMISE frame without the END\_HEADERS flag set MUST be followed by a CONTINUATION frame for the same stream. & \\ 
\hline
69 & 6.7 & If a PING frame is received with a Stream Identifier field value other than 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
70 & 6.7 & If a PING frame is received with a Stream Identifier field value other than 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
71 & 6.9 & A receiver MUST treat the receipt of a WINDOW\_UPDATE frame with a flow-control window increment of 0 as a stream error (Section 5.4.2) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
72 & 6.9 & A receiver MUST treat the receipt of a WINDOW\_UPDATE frame with a flow-control window increment of 0 as a stream error (Section 5.4.2) of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
73 & 6.9.1 & A sender MUST NOT allow a flow-control window to exceed $2^{31}-1$ octets. If a sender receives a WINDOW\_UPDATE that causes a flow-control window to exceed this maximum, it MUST terminate either the stream or the connection, as appropriate. & \checkmark \\ 
\hline
74 & 6.9.1 & The sender MUST NOT send a flow-controlled frame with a length that exceeds the space available in either of the flow-control windows advertised by the receiver. & \checkmark \\ 
\hline
75 & 6.9.1 & A sender MUST NOT allow a flow-control window to exceed $2^{31}-1$ octets. If a sender receives a WINDOW\_UPDATE that causes a flow-control window to exceed this maximum, it MUST terminate either the stream or the connection, as appropriate. (server side) & \\ 
\hline
76 & 6.9.1 & The sender MUST NOT send a flow-controlled frame with a length that exceeds the space available in either of the flow-control windows advertised by the receiver. (server side) & \\ 
\hline
77 & 6.10 & If a CONTINUATION frame is received with a Stream Identifier field of 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
78 & 6.10 & A CONTINUATION frame MUST be preceded by a HEADERS, PUSH\_PROMISE or CONTINUATION frame without the END\_HEADERS flag set. (Using HEADERS frame with END\_HEADERS flag set) & \checkmark \\ 
\hline
79 & 6.10 & A CONTINUATION frame MUST be preceded by a HEADERS, PUSH\_PROMISE or CONTINUATION frame without the END\_HEADERS flag set. (Using PUSH\_PROMISE frame with END\_HEADERS flag set) & \\ 
\hline
80 & 6.10 & CONTINUATION frames MUST be associated with a stream. & \checkmark \\ 
\hline
81 & 6.10 & If the END\_HEADERS flag is not set, this frame MUST be followed by another CONTINUATION frame. A receiver MUST treat the receipt of any other type of frame or a frame on a different stream as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
82 & 6.10 & If a CONTINUATION frame is received with a Stream Identifier field of 0x00, the recipient MUST respond with a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
83 & 6.10 & A CONTINUATION frame MUST be preceded by a HEADERS, PUSH\_PROMISE or CONTINUATION frame without the END\_HEADERS flag set. (Using HEADERS frame with END\_HEADERS flag set) (server side) & \\ 
\hline
84 & 6.10 & CONTINUATION frames MUST be associated with a stream. (server side) & \\ 
\hline
85 & 6.10 & If the END\_HEADERS flag is not set, this frame MUST be followed by another CONTINUATION frame. A receiver MUST treat the receipt of any other type of frame or a frame on a different stream as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. (server side) & \\ 
\hline
86 & 8.1 & Trailers MUST NOT include pseudo-header fields (Section 8.3). & \checkmark \\ 
\hline
87 & 8.1 & Other frames (from any stream) MUST NOT occur between the HEADERS frame and any CONTINUATION frames that might follow. & \checkmark \\ 
\hline
88 & 8.1 & An endpoint that receives a HEADERS frame without the END\_STREAM flag set after receiving the HEADERS frame that opens a request or after receiving a final (non-informational) status code MUST treat the corresponding request or response as malformed (Section 8.1.1). & \checkmark \\ 
\hline
89 & 8.1 & Trailers MUST NOT include pseudo-header fields (Section 8.3). (server side) & \\ 
\hline
90 & 8.1 & Other frames (from any stream) MUST NOT occur between the HEADERS frame and any CONTINUATION frames that might follow. (server side) & \\ 
\hline
91 & 8.1 & An endpoint that receives a HEADERS frame without the END\_STREAM flag set after receiving the HEADERS frame that opens a request or after receiving a final (non-informational) status code MUST treat the corresponding request or response as malformed (Section 8.1.1). (server side) & \\ 
\hline
92 & 8.2 & Field names MUST be converted to lowercase when constructing an HTTP/2 message. & \checkmark \\ 
\hline
93 & 8.2 & Field names MUST be converted to lowercase when constructing an HTTP/2 message. (server side) & \\ 
\hline
94 & 8.2.1 & Field names MUST NOT contain control characters (0x00-0x1F) & \checkmark \\ 
\hline
95 & 8.2.1 & Field names MUST NOT contain ASCII SP (0x20) & \checkmark \\ 
\hline
96 & 8.2.1 & Field names MUST NOT contain DEL character (0x7F) & \checkmark \\ 
\hline
97 & 8.2.1 & Field names MUST NOT contain high byte characters (0x80-0xFF) & \checkmark \\ 
\hline
98 & 8.2.1 & With the exception of pseudo-header fields (Section 8.3), which have a name that starts with a single colon, field names MUST NOT include a colon (ASCII COLON, 0x3a). & \checkmark \\ 
\hline
99 & 8.2.1 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the start of the value) & \checkmark \\ 
\hline
100 & 8.2.1 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the start of the value) & \checkmark \\ 
\hline
101 & 8.2.1 & A field value MUST NOT start with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09). & \checkmark \\ 
\hline
102 & 8.2.1 & A field value MUST NOT end with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09). & \checkmark \\ 
\hline
103 & 8.2.1 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the middle of the value) & \checkmark \\ 
\hline
104 & 8.2.1 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the end of the value) & \checkmark \\ 
\hline
105 & 8.2.1 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the middle of the value) & \checkmark \\ 
\hline
106 & 8.2.1 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the end of the value) & \checkmark \\ 
\hline
107 & 8.2.1 & Field names MUST NOT contain control characters (0x00-0x1F) (server side) & \\ 
\hline
108 & 8.2.1 & Field names MUST NOT contain ASCII SP (0x20) (server side) & \\ 
\hline
109 & 8.2.1 & Field names MUST NOT contain DEL character (0x7F) (server side) & \\ 
\hline
110 & 8.2.1 & Field names MUST NOT contain high byte characters (0x80-0xFF) (server side) & \\ 
\hline
111 & 8.2.1 & With the exception of pseudo-header fields (Section 8.3), which have a name that starts with a single colon, field names MUST NOT include a colon (ASCII COLON, 0x3a). (server side) & \\ 
\hline
112 & 8.2.1 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the start of the value) (server side) & \\ 
\hline
113 & 8.2.1 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the start of the value) (server side) & \\ 
\hline
114 & 8.2.1 & A field value MUST NOT start with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09). (server side) & \\ 
\hline
115 & 8.2.1 & A field value MUST NOT end with an ASCII whitespace character (ASCII SP or HTAB, 0x20 or 0x09). (server side) & \\ 
\hline
116 & 8.2.1 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the middle of the value) (server side) & \\ 
\hline
117 & 8.2.1 & A field value MUST NOT contain line feed (ASCII LF, 0x0a). (Tested at the end of the value) (server side) & \\ 
\hline
118 & 8.2.1 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the middle of the value) (server side) & \\ 
\hline
119 & 8.2.1 & A field value MUST NOT contain carriage return (ASCII CR, 0x0d). (Tested at the end of the value) (server side) & \\ 
\hline
120 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing connection header field (RFC9113 Section 8.2.2) & \checkmark \\ 
\hline
121 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing proxy-connection header field (RFC9113 Section 8.2.2) & \checkmark \\ 
\hline
122 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing keep-alive header field (RFC9113 Section 8.2.2) & \checkmark \\ 
\hline
123 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing transfer-encoding header field (RFC9113 Section 8.2.2) & \checkmark \\ 
\hline
124 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing upgrade header field (RFC9113 Section 8.2.2) & \checkmark \\ 
\hline
125 & 8.2.2 & The TE header field MAY be present in an HTTP/2 request; when it is, it MUST NOT contain any value other than 'trailers'. & \checkmark \\ 
\hline
126 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing connection header field (RFC9113 Section 8.2.2) (server side) & \\ 
\hline
127 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing proxy-connection header field (RFC9113 Section 8.2.2) (server side) & \\ 
\hline
128 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing keep-alive header field (RFC9113 Section 8.2.2) (server side) & \\ 
\hline
129 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing transfer-encoding header field (RFC9113 Section 8.2.2) (server side) & \\ 
\hline
130 & 8.2.2 & An endpoint MUST NOT generate an HTTP/2 message containing upgrade header field (RFC9113 Section 8.2.2) (server side) & \\ 
\hline
131 & 8.2.2 & The TE header field MAY be present in an HTTP/2 request; when it is, it MUST NOT contain any value other than 'trailers'. (server side) & \\ 
\hline
132 & 8.3 & Pseudo-header fields are not HTTP header fields. Endpoints MUST NOT generate pseudo-header fields other than those defined in this document. & \checkmark \\ 
\hline
133 & 8.3 & Pseudo-header fields defined for requests MUST NOT appear in responses. & \\ 
\hline
134 & 8.3 & Pseudo-header fields defined for responses MUST NOT appear in requests. & \checkmark \\ 
\hline
135 & 8.3 & All pseudo-header fields sent from a client MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1). & \checkmark \\ 
\hline
136 & 8.3 & All pseudo-header fields sent from a server MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1). (server side) & \\ 
\hline
137 & 8.3 & The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a request frame with the same value. & \checkmark \\ 
\hline
138 & 8.3 & The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a request frame with different values. & \checkmark \\ 
\hline
139 & 8.3 & The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a response frame with the same value. (server side) & \\ 
\hline
140 & 8.3 & The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1). Tested with a response frame with different values. (server side) & \\ 
\hline
141 & 8.3 & Pseudo-header fields are not HTTP header fields. Endpoints MUST NOT generate pseudo-header fields other than those defined in this document. (server side) & \\ 
\hline
142 & 8.3.1 & Clients MUST NOT generate a request with a Host header field that differs from the ":authority" pseudo-header field. & \checkmark \\ 
\hline
143 & 8.3.1 & ':authority' MUST NOT include the deprecated userinfo subcomponent for "http" or "https" schemed URIs. & \checkmark \\ 
\hline
144 & 8.3.1 & The ":path" pseudo-header field MUST NOT be empty for "http" or "https" URIs; "http" or "https" URIs that do not contain a path component MUST include a value of '/'. & \checkmark \\ 
\hline
145 & 8.3.1 & All HTTP/2 requests MUST include exactly one valid value for the ":method", ":scheme", and ":path" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :method missing) & \checkmark \\ 
\hline
146 & 8.3.1 & All HTTP/2 requests MUST include exactly one valid value for the ":method", ":scheme", and ":path" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :scheme missing) & \checkmark \\ 
\hline
147 & 8.3.1 & All HTTP/2 requests MUST include exactly one valid value for the ":method", ":scheme", and ":path" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1). (Tested with :path missing) & \checkmark \\ 
\hline
148 & 8.3.2 & For HTTP/2 responses, a single ":status" pseudo-header field is defined that carries the HTTP status code field. This pseudo-header field MUST be included in all responses, including interim responses; otherwise, the response is malformed. & \\ 
\hline
149 & 8.4 & A client cannot push. Thus, servers MUST treat the receipt of a PUSH\_PROMISE frame as a connection error (Section 5.4.1) of type PROTOCOL\_ERROR. & \checkmark \\ 
\hline
150 & 8.4.1 & The header fields in PUSH\_PROMISE and any subsequent CONTINUATION frames MUST be a valid and complete set of request header fields. & \\ 
\hline
151 & 8.4.1 & In the PUSH\_PROMISE frame, the server MUST include a method in the ":method" pseudo-header field that is safe and cacheable. & \\ 
\hline
152 & 8.5 & With the CONNECT method, the " :scheme" and " :path" pseudo-header fields MUST be omitted. (Tested with only :path present) & \checkmark \\ 
\hline
153 & 8.5 & With the CONNECT method, the " :scheme" and " :path" pseudo-header fields MUST be omitted. (Tested with only :scheme present) & \checkmark \\ 
\hline
154 & 8.5 & With the CONNECT method, the ":scheme" and ":path" pseudo-header fields MUST be omitted. (Tested with both present) & \checkmark \\ 
\hline
155 & 8.5 & With the CONNECT method, The ":authority" pseudo-header field contains the host and port to connect to & \checkmark \\ 
\hline
156 & 8.6 & HTTP/2 does not support the 101 (Switching Protocols) informational status code (Section 15.2.2 of [HTTP]). & \\ 
\hline